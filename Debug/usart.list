
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047fc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080049d4  080049d4  000059d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b14  08004b14  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b1c  08004b1c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b1c  08004b1c  00005b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b20  08004b20  00005b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b24  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000930  2000000c  08004b30  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  08004b30  0000693c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e624  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231c  00000000  00000000  00014660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00016980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083e  00000000  00000000  00017450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025233  00000000  00000000  00017c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee98  00000000  00000000  0003cec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8f79  00000000  00000000  0004bd59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a7c  00000000  00000000  00134d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00137794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080049bc 	.word	0x080049bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080049bc 	.word	0x080049bc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <crc8ccitt>:
    0x96, 0x91, 0x98, 0x9F, 0x8A, 0x8D, 0x84, 0x83,
    0xDE, 0xD9, 0xD0, 0xD7, 0xC2, 0xC5, 0xCC, 0xCB,
    0xE6, 0xE1, 0xE8, 0xEF, 0xFA, 0xFD, 0xF4, 0xF3
};

uint8_t crc8ccitt(const void * data, size_t size) {
 8000508:	b480      	push	{r7}
 800050a:	b087      	sub	sp, #28
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	uint8_t val = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	75fb      	strb	r3, [r7, #23]

	uint8_t * pos = (uint8_t *) data;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	613b      	str	r3, [r7, #16]
	uint8_t * end = pos + size;
 800051a:	693a      	ldr	r2, [r7, #16]
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	4413      	add	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]

	while (pos < end) {
 8000522:	e00b      	b.n	800053c <crc8ccitt+0x34>
		val = CRC_TABLE[val ^ *pos];
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	7dfb      	ldrb	r3, [r7, #23]
 800052a:	4053      	eors	r3, r2
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <crc8ccitt+0x4c>)
 8000532:	5c9b      	ldrb	r3, [r3, r2]
 8000534:	75fb      	strb	r3, [r7, #23]
		pos++;
 8000536:	693b      	ldr	r3, [r7, #16]
 8000538:	3301      	adds	r3, #1
 800053a:	613b      	str	r3, [r7, #16]
	while (pos < end) {
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	429a      	cmp	r2, r3
 8000542:	d3ef      	bcc.n	8000524 <crc8ccitt+0x1c>
	}

	return val;
 8000544:	7dfb      	ldrb	r3, [r7, #23]
}
 8000546:	4618      	mov	r0, r3
 8000548:	371c      	adds	r7, #28
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	080049d4 	.word	0x080049d4

08000558 <frame_parser_create>:

#define MSG_PREFIX		4
#define MSG_SUBFIX		3

/* Returns number of frame bytes */
uint8_t frame_parser_create(uint8_t *rawFrame, usartMessage_t *message) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
	uint8_t crc;
	uint8_t idx = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	73bb      	strb	r3, [r7, #14]
	if (message->len > MAX_PAYLOAD_SIZE) {
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 800056c:	2ba0      	cmp	r3, #160	@ 0xa0
 800056e:	d901      	bls.n	8000574 <frame_parser_create+0x1c>
		// payload out of score
		return 0;
 8000570:	2300      	movs	r3, #0
 8000572:	e066      	b.n	8000642 <frame_parser_create+0xea>
	}
	rawFrame[idx++] = SOF_CHAR;
 8000574:	7bbb      	ldrb	r3, [r7, #14]
 8000576:	1c5a      	adds	r2, r3, #1
 8000578:	73ba      	strb	r2, [r7, #14]
 800057a:	461a      	mov	r2, r3
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4413      	add	r3, r2
 8000580:	22be      	movs	r2, #190	@ 0xbe
 8000582:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = message->addr;
 8000584:	7bbb      	ldrb	r3, [r7, #14]
 8000586:	1c5a      	adds	r2, r3, #1
 8000588:	73ba      	strb	r2, [r7, #14]
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	7812      	ldrb	r2, [r2, #0]
 8000594:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = message->cmd;
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	1c5a      	adds	r2, r3, #1
 800059a:	73ba      	strb	r2, [r7, #14]
 800059c:	461a      	mov	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4413      	add	r3, r2
 80005a2:	683a      	ldr	r2, [r7, #0]
 80005a4:	7852      	ldrb	r2, [r2, #1]
 80005a6:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = message->arg;
 80005a8:	7bbb      	ldrb	r3, [r7, #14]
 80005aa:	1c5a      	adds	r2, r3, #1
 80005ac:	73ba      	strb	r2, [r7, #14]
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4413      	add	r3, r2
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	7892      	ldrb	r2, [r2, #2]
 80005b8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < message->len; i++) {
 80005ba:	2300      	movs	r3, #0
 80005bc:	73fb      	strb	r3, [r7, #15]
 80005be:	e00d      	b.n	80005dc <frame_parser_create+0x84>
		rawFrame[idx + i] = message->payload[i];
 80005c0:	7bfa      	ldrb	r2, [r7, #15]
 80005c2:	7bb9      	ldrb	r1, [r7, #14]
 80005c4:	7bfb      	ldrb	r3, [r7, #15]
 80005c6:	440b      	add	r3, r1
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	440b      	add	r3, r1
 80005ce:	6839      	ldr	r1, [r7, #0]
 80005d0:	440a      	add	r2, r1
 80005d2:	78d2      	ldrb	r2, [r2, #3]
 80005d4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < message->len; i++) {
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	3301      	adds	r3, #1
 80005da:	73fb      	strb	r3, [r7, #15]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80005e2:	7bfa      	ldrb	r2, [r7, #15]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d3eb      	bcc.n	80005c0 <frame_parser_create+0x68>
	}
	idx = idx + message->len;
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	f893 20a3 	ldrb.w	r2, [r3, #163]	@ 0xa3
 80005ee:	7bbb      	ldrb	r3, [r7, #14]
 80005f0:	4413      	add	r3, r2
 80005f2:	73bb      	strb	r3, [r7, #14]
	rawFrame[idx++] = message->len;
 80005f4:	7bbb      	ldrb	r3, [r7, #14]
 80005f6:	1c5a      	adds	r2, r3, #1
 80005f8:	73ba      	strb	r2, [r7, #14]
 80005fa:	461a      	mov	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	683a      	ldr	r2, [r7, #0]
 8000602:	f892 20a3 	ldrb.w	r2, [r2, #163]	@ 0xa3
 8000606:	701a      	strb	r2, [r3, #0]
	crc = crc8ccitt(rawFrame + 1, message->len + 4);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8000612:	3304      	adds	r3, #4
 8000614:	4619      	mov	r1, r3
 8000616:	4610      	mov	r0, r2
 8000618:	f7ff ff76 	bl	8000508 <crc8ccitt>
 800061c:	4603      	mov	r3, r0
 800061e:	737b      	strb	r3, [r7, #13]
	rawFrame[idx++] = crc;
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	73ba      	strb	r2, [r7, #14]
 8000626:	461a      	mov	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4413      	add	r3, r2
 800062c:	7b7a      	ldrb	r2, [r7, #13]
 800062e:	701a      	strb	r2, [r3, #0]
	rawFrame[idx++] = EOF_CHAR;
 8000630:	7bbb      	ldrb	r3, [r7, #14]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	73ba      	strb	r2, [r7, #14]
 8000636:	461a      	mov	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	22bf      	movs	r2, #191	@ 0xbf
 800063e:	701a      	strb	r2, [r3, #0]
	return idx;
 8000640:	7bbb      	ldrb	r3, [r7, #14]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <frame_parser_analyze>:

HAL_StatusTypeDef frame_parser_analyze(uint8_t *rawFrame, uint8_t size, usartMessage_t *message) {
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	460b      	mov	r3, r1
 8000654:	607a      	str	r2, [r7, #4]
 8000656:	72fb      	strb	r3, [r7, #11]

	/*	the frame:		|SOF|ADDR|CMD|ARG|PAYLOAD|LEN|CRC|EOF| 		*/
	/*	size in bytes:	| 1 | 1 | 1 | 1 | 0 - 160| 1 | 1 | 1 |		*/
	uint8_t payloadLen = size - MSG_PREFIX - MSG_SUBFIX;
 8000658:	7afb      	ldrb	r3, [r7, #11]
 800065a:	3b07      	subs	r3, #7
 800065c:	75bb      	strb	r3, [r7, #22]
	// check payload size
	uint8_t readSize = rawFrame[MSG_PREFIX + payloadLen];
 800065e:	7dbb      	ldrb	r3, [r7, #22]
 8000660:	3304      	adds	r3, #4
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	757b      	strb	r3, [r7, #21]
	if (payloadLen != readSize) {
 800066c:	7dba      	ldrb	r2, [r7, #22]
 800066e:	7d7b      	ldrb	r3, [r7, #21]
 8000670:	429a      	cmp	r2, r3
 8000672:	d001      	beq.n	8000678 <frame_parser_analyze+0x2e>
		//message is corrupted: payload size differs from expected.
		return HAL_ERROR;
 8000674:	2301      	movs	r3, #1
 8000676:	e03e      	b.n	80006f6 <frame_parser_analyze+0xac>
	}

	// get payload from raw buffer
	for (uint8_t i = 0; i < payloadLen; i++) {
 8000678:	2300      	movs	r3, #0
 800067a:	75fb      	strb	r3, [r7, #23]
 800067c:	e00d      	b.n	800069a <frame_parser_analyze+0x50>
		message->payload[i] = rawFrame[MSG_PREFIX + i];
 800067e:	7dfb      	ldrb	r3, [r7, #23]
 8000680:	3304      	adds	r3, #4
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	441a      	add	r2, r3
 8000688:	7dfb      	ldrb	r3, [r7, #23]
 800068a:	7811      	ldrb	r1, [r2, #0]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	4413      	add	r3, r2
 8000690:	460a      	mov	r2, r1
 8000692:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < payloadLen; i++) {
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	3301      	adds	r3, #1
 8000698:	75fb      	strb	r3, [r7, #23]
 800069a:	7dfa      	ldrb	r2, [r7, #23]
 800069c:	7dbb      	ldrb	r3, [r7, #22]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d3ed      	bcc.n	800067e <frame_parser_analyze+0x34>
	}

	// check if crc is ok
	uint8_t crcCode = crc8ccitt(rawFrame + 1, size - 3);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	1c5a      	adds	r2, r3, #1
 80006a6:	7afb      	ldrb	r3, [r7, #11]
 80006a8:	3b03      	subs	r3, #3
 80006aa:	4619      	mov	r1, r3
 80006ac:	4610      	mov	r0, r2
 80006ae:	f7ff ff2b 	bl	8000508 <crc8ccitt>
 80006b2:	4603      	mov	r3, r0
 80006b4:	753b      	strb	r3, [r7, #20]
	if (rawFrame[MSG_PREFIX + payloadLen + 1] != crcCode) {
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	3305      	adds	r3, #5
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	7d3a      	ldrb	r2, [r7, #20]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d001      	beq.n	80006ca <frame_parser_analyze+0x80>
//		crc is not equal
		return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e015      	b.n	80006f6 <frame_parser_analyze+0xac>
	}

//	everything is ok.
	message->addr 	= rawFrame[1];
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	785a      	ldrb	r2, [r3, #1]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	701a      	strb	r2, [r3, #0]
	message->cmd 	= rawFrame[2];
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	789a      	ldrb	r2, [r3, #2]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	705a      	strb	r2, [r3, #1]
	message->arg 	= rawFrame[3];
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	78da      	ldrb	r2, [r3, #3]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	709a      	strb	r2, [r3, #2]
	message->len	= rawFrame[MSG_PREFIX + payloadLen];
 80006e2:	7dbb      	ldrb	r3, [r7, #22]
 80006e4:	3304      	adds	r3, #4
 80006e6:	461a      	mov	r2, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	return HAL_OK;
 80006f4:	2300      	movs	r3, #0
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0fe      	sub	sp, #504	@ 0x1f8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fd36 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f86d 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 f941 	bl	8000994 <MX_GPIO_Init>
  MX_DMA_Init();
 8000712:	f000 f91b 	bl	800094c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000716:	f000 f8cf 	bl	80008b8 <MX_LPUART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800071a:	f000 f8b0 	bl	800087e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  uint8_t frameToSend[MAX_FRAME_SIZE];
  usart_dma_init(&hlpuart1);
 800071e:	4831      	ldr	r0, [pc, #196]	@ (80007e4 <main+0xe4>)
 8000720:	f000 fbe2 	bl	8000ee8 <usart_dma_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  usartMessage_t message;
	  message = usart_dma_frameProcess();
 8000724:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000728:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fc27 	bl	8000f80 <usart_dma_frameProcess>

	  // Data to send
	  usartMessage_t dataToSend = {
 8000732:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000736:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800073a:	4618      	mov	r0, r3
 800073c:	23a4      	movs	r3, #164	@ 0xa4
 800073e:	461a      	mov	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f004 f901 	bl	8004948 <memset>
 8000746:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800074a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000756:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800075a:	2203      	movs	r2, #3
 800075c:	705a      	strb	r2, [r3, #1]
 800075e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8000762:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8000766:	2202      	movs	r2, #2
 8000768:	709a      	strb	r2, [r3, #2]
	  				  .arg = 2,
	  				  .cmd = 3,
	  };
//	  memcpy(dataToSend.payload, "HelloWorld", sizeof("HelloWorld"));
//	  dataToSend.len = sizeof("HelloWorld");
	  for (uint8_t z = 0; z < MAX_PAYLOAD_SIZE; z++) {
 800076a:	2300      	movs	r3, #0
 800076c:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
 8000770:	e00e      	b.n	8000790 <main+0x90>
		  dataToSend.payload[z] = z;
 8000772:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8000776:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 800077a:	f5a2 72a8 	sub.w	r2, r2, #336	@ 0x150
 800077e:	4413      	add	r3, r2
 8000780:	f897 21f7 	ldrb.w	r2, [r7, #503]	@ 0x1f7
 8000784:	70da      	strb	r2, [r3, #3]
	  for (uint8_t z = 0; z < MAX_PAYLOAD_SIZE; z++) {
 8000786:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 800078a:	3301      	adds	r3, #1
 800078c:	f887 31f7 	strb.w	r3, [r7, #503]	@ 0x1f7
 8000790:	f897 31f7 	ldrb.w	r3, [r7, #503]	@ 0x1f7
 8000794:	2b9f      	cmp	r3, #159	@ 0x9f
 8000796:	d9ec      	bls.n	8000772 <main+0x72>
	  }
	  dataToSend.len = MAX_PAYLOAD_SIZE;
 8000798:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800079c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80007a0:	22a0      	movs	r2, #160	@ 0xa0
 80007a2:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	  // parse into frame
	  memset(frameToSend, 0, MAX_FRAME_SIZE);
 80007a6:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80007aa:	22a7      	movs	r2, #167	@ 0xa7
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 f8ca 	bl	8004948 <memset>
	  uint8_t frameSize = frame_parser_create(frameToSend, &dataToSend);
 80007b4:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80007b8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff feca 	bl	8000558 <frame_parser_create>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f887 31f6 	strb.w	r3, [r7, #502]	@ 0x1f6

	  // send over usart
	  usart_dma_SendFrame(frameToSend, frameSize);
 80007ca:	f897 21f6 	ldrb.w	r2, [r7, #502]	@ 0x1f6
 80007ce:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fbab 	bl	8000f30 <usart_dma_SendFrame>
	  HAL_Delay(500);
 80007da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007de:	f000 fd3b 	bl	8001258 <HAL_Delay>
  {
 80007e2:	e79f      	b.n	8000724 <main+0x24>
 80007e4:	20000028 	.word	0x20000028

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2238      	movs	r2, #56	@ 0x38
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 f8a6 	bl	8004948 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800080a:	2000      	movs	r0, #0
 800080c:	f001 fb46 	bl	8001e9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2340      	movs	r3, #64	@ 0x40
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000826:	2304      	movs	r3, #4
 8000828:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800082a:	2355      	movs	r3, #85	@ 0x55
 800082c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000832:	2302      	movs	r3, #2
 8000834:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fbe0 	bl	8002004 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800084a:	f000 f911 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000852:	2303      	movs	r3, #3
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2104      	movs	r1, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fede 	bl	8002628 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000872:	f000 f8fd 	bl	8000a70 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	@ 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	2100      	movs	r1, #0
 8000886:	200b      	movs	r0, #11
 8000888:	f000 fde3 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800088c:	200b      	movs	r0, #11
 800088e:	f000 fdfa 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	200c      	movs	r0, #12
 8000898:	f000 fddb 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800089c:	200c      	movs	r0, #12
 800089e:	f000 fdf2 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* LPUART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	205b      	movs	r0, #91	@ 0x5b
 80008a8:	f000 fdd3 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80008ac:	205b      	movs	r0, #91	@ 0x5b
 80008ae:	f000 fdea 	bl	8001486 <HAL_NVIC_EnableIRQ>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008bc:	4b21      	ldr	r3, [pc, #132]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008be:	4a22      	ldr	r2, [pc, #136]	@ (8000948 <MX_LPUART1_UART_Init+0x90>)
 80008c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008c2:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b18      	ldr	r3, [pc, #96]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e8:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f4:	4b13      	ldr	r3, [pc, #76]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008fa:	4812      	ldr	r0, [pc, #72]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 80008fc:	f002 fafe 	bl	8002efc <HAL_UART_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 f8b3 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	480d      	ldr	r0, [pc, #52]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 800090e:	f003 fefc 	bl	800470a <HAL_UARTEx_SetTxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000918:	f000 f8aa 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091c:	2100      	movs	r1, #0
 800091e:	4809      	ldr	r0, [pc, #36]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 8000920:	f003 ff31 	bl	8004786 <HAL_UARTEx_SetRxFifoThreshold>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800092a:	f000 f8a1 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_LPUART1_UART_Init+0x8c>)
 8000930:	f003 feb2 	bl	8004698 <HAL_UARTEx_DisableFifoMode>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800093a:	f000 f899 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000028 	.word	0x20000028
 8000948:	40008000 	.word	0x40008000

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_DMA_Init+0x44>)
 8000954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <MX_DMA_Init+0x44>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	6493      	str	r3, [r2, #72]	@ 0x48
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_DMA_Init+0x44>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_DMA_Init+0x44>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <MX_DMA_Init+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6493      	str	r3, [r2, #72]	@ 0x48
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_DMA_Init+0x44>)
 8000978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]

}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08a      	sub	sp, #40	@ 0x28
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0320 	orr.w	r3, r3, #32
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0320 	and.w	r3, r3, #32
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b23      	ldr	r3, [pc, #140]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e6:	4b20      	ldr	r3, [pc, #128]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000a68 <MX_GPIO_Init+0xd4>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a12:	f001 fa07 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <MX_GPIO_Init+0xd8>)
 8000a2e:	f001 f877 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a32:	2320      	movs	r3, #32
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4c:	f001 f868 	bl	8001b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a50:	2200      	movs	r2, #0
 8000a52:	2100      	movs	r1, #0
 8000a54:	2028      	movs	r0, #40	@ 0x28
 8000a56:	f000 fcfc 	bl	8001452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a5a:	2028      	movs	r0, #40	@ 0x28
 8000a5c:	f000 fd13 	bl	8001486 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a60:	bf00      	nop
 8000a62:	3728      	adds	r7, #40	@ 0x28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	48000800 	.word	0x48000800

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <RB_read>:
 *  Created on: Feb 12, 2025
 *      Author: mikop
 */
#include "ring_buf.h"

HAL_StatusTypeDef RB_read(ringBuffer_t *ringBuf, uint8_t *val) {
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
	if (ringBuf->head == ringBuf->tail) {
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	881a      	ldrh	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	885b      	ldrh	r3, [r3, #2]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d101      	bne.n	8000a96 <RB_read+0x1a>
		return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e015      	b.n	8000ac2 <RB_read+0x46>
	}

	*val = ringBuf->buffer[ringBuf->tail];
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	885b      	ldrh	r3, [r3, #2]
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	791a      	ldrb	r2, [r3, #4]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	701a      	strb	r2, [r3, #0]
	ringBuf->tail = (ringBuf->tail + 1) % RING_BUFFER_SIZE;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	885b      	ldrh	r3, [r3, #2]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	425a      	negs	r2, r3
 8000aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ab2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ab6:	bf58      	it	pl
 8000ab8:	4253      	negpl	r3, r2
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	805a      	strh	r2, [r3, #2]
	return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <RB_write>:

HAL_StatusTypeDef RB_write(ringBuffer_t *ringBuf, uint8_t val) {
 8000ace:	b480      	push	{r7}
 8000ad0:	b085      	sub	sp, #20
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]

	uint16_t tempHead = (ringBuf->head + 1) % RING_BUFFER_SIZE;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	425a      	negs	r2, r3
 8000ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ae6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000aea:	bf58      	it	pl
 8000aec:	4253      	negpl	r3, r2
 8000aee:	81fb      	strh	r3, [r7, #14]
	if (tempHead == ringBuf->tail) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	885b      	ldrh	r3, [r3, #2]
 8000af4:	89fa      	ldrh	r2, [r7, #14]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d101      	bne.n	8000afe <RB_write+0x30>
		return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00a      	b.n	8000b14 <RB_write+0x46>
	}

	ringBuf->buffer[ringBuf->head] = val;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4413      	add	r3, r2
 8000b08:	78fa      	ldrb	r2, [r7, #3]
 8000b0a:	711a      	strb	r2, [r3, #4]
	ringBuf->head = tempHead;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	89fa      	ldrh	r2, [r7, #14]
 8000b10:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8000b12:	2300      	movs	r3, #0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <HAL_MspInit+0x44>)
 8000b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b56:	f001 fa45 	bl	8001fe4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40021000 	.word	0x40021000

08000b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b09e      	sub	sp, #120	@ 0x78
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2254      	movs	r2, #84	@ 0x54
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f003 fedd 	bl	8004948 <memset>
  if(huart->Instance==LPUART1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a49      	ldr	r2, [pc, #292]	@ (8000cb8 <HAL_UART_MspInit+0x150>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	f040 808a 	bne.w	8000cae <HAL_UART_MspInit+0x146>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b9a:	2320      	movs	r3, #32
 8000b9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 ff5a 	bl	8002a60 <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bb2:	f7ff ff5d 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b41      	ldr	r3, [pc, #260]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bba:	4a40      	ldr	r2, [pc, #256]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bda:	4b38      	ldr	r3, [pc, #224]	@ (8000cbc <HAL_UART_MspInit+0x154>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c04:	f000 ff8c 	bl	8001b20 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000cc4 <HAL_UART_MspInit+0x15c>)
 8000c0c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c10:	2222      	movs	r2, #34	@ 0x22
 8000c12:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c14:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c1a:	4b29      	ldr	r3, [pc, #164]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c20:	4b27      	ldr	r3, [pc, #156]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c22:	2280      	movs	r2, #128	@ 0x80
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c26:	4b26      	ldr	r3, [pc, #152]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c2c:	4b24      	ldr	r3, [pc, #144]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000c32:	4b23      	ldr	r3, [pc, #140]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c38:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000c3e:	4820      	ldr	r0, [pc, #128]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c40:	f000 fc3c 	bl	80014bc <HAL_DMA_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8000c4a:	f7ff ff11 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a1b      	ldr	r2, [pc, #108]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000c56:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc0 <HAL_UART_MspInit+0x158>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000ccc <HAL_UART_MspInit+0x164>)
 8000c60:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c64:	2223      	movs	r2, #35	@ 0x23
 8000c66:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c68:	4b17      	ldr	r3, [pc, #92]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c6a:	2210      	movs	r2, #16
 8000c6c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c74:	4b14      	ldr	r3, [pc, #80]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c76:	2280      	movs	r2, #128	@ 0x80
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c80:	4b11      	ldr	r3, [pc, #68]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000c86:	4b10      	ldr	r3, [pc, #64]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000c92:	480d      	ldr	r0, [pc, #52]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000c94:	f000 fc12 	bl	80014bc <HAL_DMA_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8000c9e:	f7ff fee7 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a08      	ldr	r2, [pc, #32]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000ca6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <HAL_UART_MspInit+0x160>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3778      	adds	r7, #120	@ 0x78
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40008000 	.word	0x40008000
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	200000bc 	.word	0x200000bc
 8000cc4:	40020008 	.word	0x40020008
 8000cc8:	2000011c 	.word	0x2000011c
 8000ccc:	4002001c 	.word	0x4002001c

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 fa79 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000d34:	4802      	ldr	r0, [pc, #8]	@ (8000d40 <DMA1_Channel1_IRQHandler+0x10>)
 8000d36:	f000 fda4 	bl	8001882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000bc 	.word	0x200000bc

08000d44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <DMA1_Channel2_IRQHandler+0x10>)
 8000d4a:	f000 fd9a 	bl	8001882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	2000011c 	.word	0x2000011c

08000d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d5c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d60:	f001 f878 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d6c:	4802      	ldr	r0, [pc, #8]	@ (8000d78 <LPUART1_IRQHandler+0x10>)
 8000d6e:	f002 f995 	bl	800309c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000028 	.word	0x20000028

08000d7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	@ (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <HAL_UARTEx_RxEventCallback>:
UART_HandleTypeDef *huartHandler;

HAL_StatusTypeDef uart_Send();

// Receiving done - CB
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == LPUART1) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a35      	ldr	r2, [pc, #212]	@ (8000e88 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d14e      	bne.n	8000e54 <HAL_UARTEx_RxEventCallback+0xb4>
		static uint8_t start = 0;
		// assuming that data can be send with delays - CB from IDLE
		static uint8_t tempBuf[MAX_FRAME_SIZE];
		static uint8_t tempPos = 0;

		for (uint8_t i = 0; i < Size; i++) {
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e046      	b.n	8000e4a <HAL_UARTEx_RxEventCallback+0xaa>
			// do not save trash data to RB
			if (rcvBuffer[i] == SOF_CHAR || start == 1) {
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	4a33      	ldr	r2, [pc, #204]	@ (8000e8c <HAL_UARTEx_RxEventCallback+0xec>)
 8000dc0:	5cd3      	ldrb	r3, [r2, r3]
 8000dc2:	2bbe      	cmp	r3, #190	@ 0xbe
 8000dc4:	d003      	beq.n	8000dce <HAL_UARTEx_RxEventCallback+0x2e>
 8000dc6:	4b32      	ldr	r3, [pc, #200]	@ (8000e90 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d13a      	bne.n	8000e44 <HAL_UARTEx_RxEventCallback+0xa4>
				start = 1;
 8000dce:	4b30      	ldr	r3, [pc, #192]	@ (8000e90 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
				// save in temp buffer - prevent RB from corrupted frames
				tempBuf[tempPos++] = rcvBuffer[i];
 8000dd4:	7bfa      	ldrb	r2, [r7, #15]
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	1c59      	adds	r1, r3, #1
 8000ddc:	b2c8      	uxtb	r0, r1
 8000dde:	492d      	ldr	r1, [pc, #180]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000de0:	7008      	strb	r0, [r1, #0]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_UARTEx_RxEventCallback+0xec>)
 8000de6:	5c9a      	ldrb	r2, [r3, r2]
 8000de8:	4b2b      	ldr	r3, [pc, #172]	@ (8000e98 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000dea:	545a      	strb	r2, [r3, r1]
				if (rcvBuffer[i] == EOF_CHAR) {
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	4a27      	ldr	r2, [pc, #156]	@ (8000e8c <HAL_UARTEx_RxEventCallback+0xec>)
 8000df0:	5cd3      	ldrb	r3, [r2, r3]
 8000df2:	2bbf      	cmp	r3, #191	@ 0xbf
 8000df4:	d11c      	bne.n	8000e30 <HAL_UARTEx_RxEventCallback+0x90>
					for (uint8_t j = 0; j < tempPos; j++) {
 8000df6:	2300      	movs	r3, #0
 8000df8:	73bb      	strb	r3, [r7, #14]
 8000dfa:	e009      	b.n	8000e10 <HAL_UARTEx_RxEventCallback+0x70>
						RB_write(&ringBufRx, tempBuf[j]);
 8000dfc:	7bbb      	ldrb	r3, [r7, #14]
 8000dfe:	4a26      	ldr	r2, [pc, #152]	@ (8000e98 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	4619      	mov	r1, r3
 8000e04:	4825      	ldr	r0, [pc, #148]	@ (8000e9c <HAL_UARTEx_RxEventCallback+0xfc>)
 8000e06:	f7ff fe62 	bl	8000ace <RB_write>
					for (uint8_t j = 0; j < tempPos; j++) {
 8000e0a:	7bbb      	ldrb	r3, [r7, #14]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	73bb      	strb	r3, [r7, #14]
 8000e10:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	7bba      	ldrb	r2, [r7, #14]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d3f0      	bcc.n	8000dfc <HAL_UARTEx_RxEventCallback+0x5c>
					}
					// ready to parse
					frameEndCnt++;
 8000e1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ea0 <HAL_UARTEx_RxEventCallback+0x100>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	3301      	adds	r3, #1
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <HAL_UARTEx_RxEventCallback+0x100>)
 8000e26:	701a      	strb	r2, [r3, #0]
					tempPos = 0;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e009      	b.n	8000e44 <HAL_UARTEx_RxEventCallback+0xa4>
				}
				else if (tempPos > MAX_FRAME_SIZE) {
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2ba7      	cmp	r3, #167	@ 0xa7
 8000e36:	d905      	bls.n	8000e44 <HAL_UARTEx_RxEventCallback+0xa4>
					/* ERROR - frame is bigger than expected */
					start = 0;
 8000e38:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
					tempPos = 0;
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_UARTEx_RxEventCallback+0xf4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < Size; i++) {
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	3301      	adds	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	887a      	ldrh	r2, [r7, #2]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d8b3      	bhi.n	8000dbc <HAL_UARTEx_RxEventCallback+0x1c>
				}
			}
		}
	}

	HAL_UARTEx_ReceiveToIdle_DMA(huartHandler, rcvBuffer, MAX_RCV_SIZE);
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	22ff      	movs	r2, #255	@ 0xff
 8000e5a:	490c      	ldr	r1, [pc, #48]	@ (8000e8c <HAL_UARTEx_RxEventCallback+0xec>)
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f003 fcd0 	bl	8004802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huartHandler->hdmarx, DMA_IT_HT);
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_UARTEx_RxEventCallback+0x104>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 0204 	bic.w	r2, r2, #4
 8000e7c:	601a      	str	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40008000 	.word	0x40008000
 8000e8c:	20000584 	.word	0x20000584
 8000e90:	2000068c 	.word	0x2000068c
 8000e94:	2000068d 	.word	0x2000068d
 8000e98:	20000690 	.word	0x20000690
 8000e9c:	2000017c 	.word	0x2000017c
 8000ea0:	20000684 	.word	0x20000684
 8000ea4:	20000688 	.word	0x20000688

08000ea8 <HAL_UART_TxCpltCallback>:

// Sending done - CB
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if(huart->Instance == LPUART1) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a09      	ldr	r2, [pc, #36]	@ (8000edc <HAL_UART_TxCpltCallback+0x34>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_UART_TxCpltCallback+0x2a>
		// If there is still sth in RB - continue sending.
		if (ringBufTx.head != ringBufTx.tail) {
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <HAL_UART_TxCpltCallback+0x38>)
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <HAL_UART_TxCpltCallback+0x38>)
 8000ec0:	885b      	ldrh	r3, [r3, #2]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d002      	beq.n	8000ecc <HAL_UART_TxCpltCallback+0x24>
			uart_Send();
 8000ec6:	f000 f8db 	bl	8001080 <uart_Send>
		else {
			// DMA free
			isDmaSend = 0;
		}
	}
}
 8000eca:	e002      	b.n	8000ed2 <HAL_UART_TxCpltCallback+0x2a>
			isDmaSend = 0;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_UART_TxCpltCallback+0x3c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40008000 	.word	0x40008000
 8000ee0:	20000380 	.word	0x20000380
 8000ee4:	20000683 	.word	0x20000683

08000ee8 <usart_dma_init>:


void usart_dma_init(UART_HandleTypeDef *huart) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	huartHandler = huart;
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <usart_dma_init+0x40>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]

	/* Disable callback from receiving half of the expected data*/
	HAL_UARTEx_ReceiveToIdle_DMA(huartHandler, rcvBuffer, MAX_RCV_SIZE);
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <usart_dma_init+0x40>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	22ff      	movs	r2, #255	@ 0xff
 8000efc:	490b      	ldr	r1, [pc, #44]	@ (8000f2c <usart_dma_init+0x44>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fc7f 	bl	8004802 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(huartHandler->hdmarx, DMA_IT_HT);
 8000f04:	4b08      	ldr	r3, [pc, #32]	@ (8000f28 <usart_dma_init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <usart_dma_init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 0204 	bic.w	r2, r2, #4
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000688 	.word	0x20000688
 8000f2c:	20000584 	.word	0x20000584

08000f30 <usart_dma_SendFrame>:


HAL_StatusTypeDef usart_dma_SendFrame(uint8_t *pData, size_t size) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < size; i++) {
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	e00a      	b.n	8000f56 <usart_dma_SendFrame+0x26>
		RB_write(&ringBufTx, pData[i]);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	@ (8000f78 <usart_dma_SendFrame+0x48>)
 8000f4c:	f7ff fdbf 	bl	8000ace <RB_write>
	for (int i = 0; i < size; i++) {
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	3301      	adds	r3, #1
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d8f0      	bhi.n	8000f40 <usart_dma_SendFrame+0x10>
	}
	/* Chcek if previous DMA sending is completed - if no data will be enququed in RB */
	if (!isDmaSend) {
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <usart_dma_SendFrame+0x4c>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <usart_dma_SendFrame+0x3c>
		uart_Send();
 8000f68:	f000 f88a 	bl	8001080 <uart_Send>
	}
	return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000380 	.word	0x20000380
 8000f7c:	20000683 	.word	0x20000683

08000f80 <usart_dma_frameProcess>:

/* Parsing raw frame from rcv_RB, returning struct of included data in the frame. */
usartMessage_t usart_dma_frameProcess(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b0d8      	sub	sp, #352	@ 0x160
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000f8a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000f8e:	6018      	str	r0, [r3, #0]
	uint8_t rawFrame[MAX_FRAME_SIZE];
	usartMessage_t msg;
	uint8_t i = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
	uint8_t isSof = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
	uint8_t val = 0;
 8000f9c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000fa0:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
	memset(&msg, 0, sizeof(msg));
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	22a4      	movs	r2, #164	@ 0xa4
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fcc9 	bl	8004948 <memset>
	if (frameEndCnt > 0) {
 8000fb6:	4b30      	ldr	r3, [pc, #192]	@ (8001078 <usart_dma_frameProcess+0xf8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d043      	beq.n	8001048 <usart_dma_frameProcess+0xc8>
			  // find SOF - start of the frame (ensure)
			  do {
				  RB_read(&ringBufRx, &val);
 8000fc0:	f107 030f 	add.w	r3, r7, #15
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	482d      	ldr	r0, [pc, #180]	@ (800107c <usart_dma_frameProcess+0xfc>)
 8000fc8:	f7ff fd58 	bl	8000a7c <RB_read>
				  if (val == SOF_CHAR || isSof == 1) {
 8000fcc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000fd0:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2bbe      	cmp	r3, #190	@ 0xbe
 8000fd8:	d003      	beq.n	8000fe2 <usart_dma_frameProcess+0x62>
 8000fda:	f897 315e 	ldrb.w	r3, [r7, #350]	@ 0x15e
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d113      	bne.n	800100a <usart_dma_frameProcess+0x8a>
					  isSof = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f887 315e 	strb.w	r3, [r7, #350]	@ 0x15e
					  rawFrame[i] = val;
 8000fe8:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8000fec:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000ff0:	f2a2 1251 	subw	r2, r2, #337	@ 0x151
 8000ff4:	7812      	ldrb	r2, [r2, #0]
 8000ff6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000ffa:	443b      	add	r3, r7
 8000ffc:	f803 2cac 	strb.w	r2, [r3, #-172]
					  i++;
 8001000:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 8001004:	3301      	adds	r3, #1
 8001006:	f887 315f 	strb.w	r3, [r7, #351]	@ 0x15f
				  }
			  } while(val != EOF_CHAR && i < MAX_FRAME_SIZE);
 800100a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800100e:	f2a3 1351 	subw	r3, r3, #337	@ 0x151
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2bbf      	cmp	r3, #191	@ 0xbf
 8001016:	d003      	beq.n	8001020 <usart_dma_frameProcess+0xa0>
 8001018:	f897 315f 	ldrb.w	r3, [r7, #351]	@ 0x15f
 800101c:	2ba6      	cmp	r3, #166	@ 0xa6
 800101e:	d9cf      	bls.n	8000fc0 <usart_dma_frameProcess+0x40>

			  // parse frame into data struct
			  frame_parser_analyze(rawFrame, i, &msg);
 8001020:	f107 0210 	add.w	r2, r7, #16
 8001024:	f897 115f 	ldrb.w	r1, [r7, #351]	@ 0x15f
 8001028:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fb0c 	bl	800064a <frame_parser_analyze>
  __ASM volatile ("cpsid i" : : : "memory");
 8001032:	b672      	cpsid	i
}
 8001034:	bf00      	nop

			  // parsing done.
			  __disable_irq();
			  frameEndCnt--;
 8001036:	4b10      	ldr	r3, [pc, #64]	@ (8001078 <usart_dma_frameProcess+0xf8>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <usart_dma_frameProcess+0xf8>)
 8001042:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001044:	b662      	cpsie	i
}
 8001046:	bf00      	nop
			  __enable_irq();
		  }
	return msg;
 8001048:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800104c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001056:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	23a4      	movs	r3, #164	@ 0xa4
 8001060:	461a      	mov	r2, r3
 8001062:	f003 fc9d 	bl	80049a0 <memcpy>
}
 8001066:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800106a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800106e:	6818      	ldr	r0, [r3, #0]
 8001070:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000684 	.word	0x20000684
 800107c:	2000017c 	.word	0x2000017c

08001080 <uart_Send>:


HAL_StatusTypeDef uart_Send() {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001086:	b672      	cpsid	i
}
 8001088:	bf00      	nop
	// DMA -> busy
	__disable_irq();
	isDmaSend = 1;
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <uart_Send+0x94>)
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001090:	b662      	cpsie	i
}
 8001092:	bf00      	nop
	__enable_irq();
	// ensure if there is sth in RB_tx
	if (ringBufTx.head != ringBufTx.tail) {
 8001094:	4b20      	ldr	r3, [pc, #128]	@ (8001118 <uart_Send+0x98>)
 8001096:	881a      	ldrh	r2, [r3, #0]
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <uart_Send+0x98>)
 800109a:	885b      	ldrh	r3, [r3, #2]
 800109c:	429a      	cmp	r2, r3
 800109e:	d02c      	beq.n	80010fa <uart_Send+0x7a>
		uint16_t size = (ringBufTx.head > ringBufTx.tail) ? (ringBufTx.head - ringBufTx.tail): (RING_BUFFER_SIZE - ringBufTx.tail);
 80010a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001118 <uart_Send+0x98>)
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <uart_Send+0x98>)
 80010a6:	885b      	ldrh	r3, [r3, #2]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d906      	bls.n	80010ba <uart_Send+0x3a>
 80010ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <uart_Send+0x98>)
 80010ae:	881a      	ldrh	r2, [r3, #0]
 80010b0:	4b19      	ldr	r3, [pc, #100]	@ (8001118 <uart_Send+0x98>)
 80010b2:	885b      	ldrh	r3, [r3, #2]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	e004      	b.n	80010c4 <uart_Send+0x44>
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <uart_Send+0x98>)
 80010bc:	885b      	ldrh	r3, [r3, #2]
 80010be:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	80bb      	strh	r3, [r7, #4]
		static uint8_t tempBuf[RING_BUFFER_SIZE];
		for (uint16_t i = 0; i < size; i++) {
 80010c6:	2300      	movs	r3, #0
 80010c8:	80fb      	strh	r3, [r7, #6]
 80010ca:	e009      	b.n	80010e0 <uart_Send+0x60>
			RB_read(&ringBufTx, &tempBuf[i]);
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <uart_Send+0x9c>)
 80010d0:	4413      	add	r3, r2
 80010d2:	4619      	mov	r1, r3
 80010d4:	4810      	ldr	r0, [pc, #64]	@ (8001118 <uart_Send+0x98>)
 80010d6:	f7ff fcd1 	bl	8000a7c <RB_read>
		for (uint16_t i = 0; i < size; i++) {
 80010da:	88fb      	ldrh	r3, [r7, #6]
 80010dc:	3301      	adds	r3, #1
 80010de:	80fb      	strh	r3, [r7, #6]
 80010e0:	88fa      	ldrh	r2, [r7, #6]
 80010e2:	88bb      	ldrh	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d3f1      	bcc.n	80010cc <uart_Send+0x4c>
		}
		HAL_UART_Transmit_DMA(huartHandler, tempBuf, size);
 80010e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <uart_Send+0xa0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	88ba      	ldrh	r2, [r7, #4]
 80010ee:	490b      	ldr	r1, [pc, #44]	@ (800111c <uart_Send+0x9c>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 ff53 	bl	8002f9c <HAL_UART_Transmit_DMA>
		__disable_irq();
		isDmaSend = 0;
		__enable_irq();
		return HAL_ERROR;
	}
	return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e007      	b.n	800110a <uart_Send+0x8a>
  __ASM volatile ("cpsid i" : : : "memory");
 80010fa:	b672      	cpsid	i
}
 80010fc:	bf00      	nop
		isDmaSend = 0;
 80010fe:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <uart_Send+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001104:	b662      	cpsie	i
}
 8001106:	bf00      	nop
		return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000683 	.word	0x20000683
 8001118:	20000380 	.word	0x20000380
 800111c:	20000738 	.word	0x20000738
 8001120:	20000688 	.word	0x20000688

08001124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001124:	480d      	ldr	r0, [pc, #52]	@ (800115c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001126:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001128:	f7ff fe28 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	@ (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	@ (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	@ (8001168 <LoopForever+0xe>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	@ (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f003 fc01 	bl	8004958 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001156:	f7ff fad3 	bl	8000700 <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   r0, =_estack
 800115c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001168:	08004b24 	.word	0x08004b24
  ldr r2, =_sbss
 800116c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001170:	2000093c 	.word	0x2000093c

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>

08001176 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f000 f95b 	bl	800143c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f80e 	bl	80011a8 <HAL_InitTick>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e001      	b.n	800119c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001198:	f7ff fcc2 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119c:	79fb      	ldrb	r3, [r7, #7]

}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011b4:	4b16      	ldr	r3, [pc, #88]	@ (8001210 <HAL_InitTick+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d022      	beq.n	8001202 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011bc:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <HAL_InitTick+0x6c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <HAL_InitTick+0x68>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f966 	bl	80014a2 <HAL_SYSTICK_Config>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10f      	bne.n	80011fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	d809      	bhi.n	80011f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	2200      	movs	r2, #0
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f000 f932 	bl	8001452 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <HAL_InitTick+0x70>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e007      	b.n	8001206 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e004      	b.n	8001206 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e001      	b.n	8001206 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000008 	.word	0x20000008
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <HAL_IncTick+0x1c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <HAL_IncTick+0x20>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4413      	add	r3, r2
 800122a:	4a03      	ldr	r2, [pc, #12]	@ (8001238 <HAL_IncTick+0x1c>)
 800122c:	6013      	str	r3, [r2, #0]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000938 	.word	0x20000938
 800123c:	20000008 	.word	0x20000008

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000938 	.word	0x20000938

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d004      	beq.n	800127c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b09      	ldr	r3, [pc, #36]	@ (8001298 <HAL_Delay+0x40>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800127c:	bf00      	nop
 800127e:	f7ff ffdf 	bl	8001240 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	429a      	cmp	r2, r3
 800128c:	d8f7      	bhi.n	800127e <HAL_Delay+0x26>
  {
  }
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000008 	.word	0x20000008

0800129c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012b8:	4013      	ands	r3, r2
 80012ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ce:	4a04      	ldr	r2, [pc, #16]	@ (80012e0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	60d3      	str	r3, [r2, #12]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e8:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <__NVIC_GetPriorityGrouping+0x18>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	f003 0307 	and.w	r3, r3, #7
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0b      	blt.n	800132a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	@ (8001338 <__NVIC_EnableIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	@ (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	@ (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	@ 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	@ 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001408:	d301      	bcc.n	800140e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140a:	2301      	movs	r3, #1
 800140c:	e00f      	b.n	800142e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140e:	4a0a      	ldr	r2, [pc, #40]	@ (8001438 <SysTick_Config+0x40>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3b01      	subs	r3, #1
 8001414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001416:	210f      	movs	r1, #15
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f7ff ff8e 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <SysTick_Config+0x40>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001426:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <SysTick_Config+0x40>)
 8001428:	2207      	movs	r2, #7
 800142a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	e000e010 	.word	0xe000e010

0800143c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff ff29 	bl	800129c <__NVIC_SetPriorityGrouping>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b086      	sub	sp, #24
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
 800145e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff40 	bl	80012e4 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff90 	bl	8001390 <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5f 	bl	800133c <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff33 	bl	8001300 <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa4 	bl	80013f8 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e08d      	b.n	80015ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b47      	ldr	r3, [pc, #284]	@ (80015f4 <HAL_DMA_Init+0x138>)
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d80f      	bhi.n	80014fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b45      	ldr	r3, [pc, #276]	@ (80015f8 <HAL_DMA_Init+0x13c>)
 80014e2:	4413      	add	r3, r2
 80014e4:	4a45      	ldr	r2, [pc, #276]	@ (80015fc <HAL_DMA_Init+0x140>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	009a      	lsls	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a42      	ldr	r2, [pc, #264]	@ (8001600 <HAL_DMA_Init+0x144>)
 80014f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80014f8:	e00e      	b.n	8001518 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b40      	ldr	r3, [pc, #256]	@ (8001604 <HAL_DMA_Init+0x148>)
 8001502:	4413      	add	r3, r2
 8001504:	4a3d      	ldr	r2, [pc, #244]	@ (80015fc <HAL_DMA_Init+0x140>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a3c      	ldr	r2, [pc, #240]	@ (8001608 <HAL_DMA_Init+0x14c>)
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800152e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001532:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fa76 	bl	8001a5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001578:	d102      	bne.n	8001580 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001594:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <HAL_DMA_Init+0x104>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d80c      	bhi.n	80015c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fa96 	bl	8001ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	e008      	b.n	80015d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020407 	.word	0x40020407
 80015f8:	bffdfff8 	.word	0xbffdfff8
 80015fc:	cccccccd 	.word	0xcccccccd
 8001600:	40020000 	.word	0x40020000
 8001604:	bffdfbf8 	.word	0xbffdfbf8
 8001608:	40020400 	.word	0x40020400

0800160c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_DMA_Start_IT+0x20>
 8001628:	2302      	movs	r3, #2
 800162a:	e066      	b.n	80016fa <HAL_DMA_Start_IT+0xee>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d155      	bne.n	80016ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f9bb 	bl	80019e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 020e 	orr.w	r2, r2, #14
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e00f      	b.n	80016a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0204 	bic.w	r2, r2, #4
 8001692:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 020a 	orr.w	r2, r2, #10
 80016a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80016d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e005      	b.n	80016f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016f4:	2302      	movs	r3, #2
 80016f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d005      	beq.n	8001726 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2204      	movs	r2, #4
 800171e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e037      	b.n	8001796 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 020e 	bic.w	r2, r2, #14
 8001734:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001744:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	f003 021f 	and.w	r2, r3, #31
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001772:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001786:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800178a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001794:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d00d      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2204      	movs	r2, #4
 80017d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	e047      	b.n	8001878 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020e 	bic.w	r2, r2, #14
 80017f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001812:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001834:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800184c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001856:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    }
  }
  return status;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2204      	movs	r2, #4
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d026      	beq.n	80018fc <HAL_DMA_IRQHandler+0x7a>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d021      	beq.n	80018fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0204 	bic.w	r2, r2, #4
 80018d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f003 021f 	and.w	r2, r3, #31
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	2104      	movs	r1, #4
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d071      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018fa:	e06c      	b.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2202      	movs	r2, #2
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02e      	beq.n	800196e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d029      	beq.n	800196e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10b      	bne.n	8001940 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 020a 	bic.w	r2, r2, #10
 8001936:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2102      	movs	r1, #2
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d038      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800196c:	e033      	b.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2208      	movs	r2, #8
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d02a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d025      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 020e 	bic.w	r2, r2, #14
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a8:	2101      	movs	r1, #1
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
}
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80019f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	f003 021f 	and.w	r2, r3, #31
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d108      	bne.n	8001a40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a3e:	e007      	b.n	8001a50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b16      	ldr	r3, [pc, #88]	@ (8001ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d802      	bhi.n	8001a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a70:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e001      	b.n	8001a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a78:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3b08      	subs	r3, #8
 8001a86:	4a12      	ldr	r2, [pc, #72]	@ (8001ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	009a      	lsls	r2, r3, #2
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001aa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2201      	movs	r2, #1
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40020407 	.word	0x40020407
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020820 	.word	0x40020820
 8001ad0:	cccccccd 	.word	0xcccccccd
 8001ad4:	40020880 	.word	0x40020880

08001ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001afa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2201      	movs	r2, #1
 8001b06:	409a      	lsls	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	1000823f 	.word	0x1000823f
 8001b1c:	40020940 	.word	0x40020940

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b2e:	e15a      	b.n	8001de6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 814c 	beq.w	8001de0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 0201 	and.w	r2, r3, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0203 	and.w	r2, r3, #3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a6 	beq.w	8001de0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b5b      	ldr	r3, [pc, #364]	@ (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c98:	4a5a      	ldr	r2, [pc, #360]	@ (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ca0:	4b58      	ldr	r3, [pc, #352]	@ (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cac:	4a56      	ldr	r2, [pc, #344]	@ (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001cd6:	d01f      	beq.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a4c      	ldr	r2, [pc, #304]	@ (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d019      	beq.n	8001d14 <HAL_GPIO_Init+0x1f4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a4b      	ldr	r2, [pc, #300]	@ (8001e10 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4a      	ldr	r2, [pc, #296]	@ (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a49      	ldr	r2, [pc, #292]	@ (8001e18 <HAL_GPIO_Init+0x2f8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1e8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a48      	ldr	r2, [pc, #288]	@ (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001d00:	2305      	movs	r3, #5
 8001d02:	e00a      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d04:	2306      	movs	r3, #6
 8001d06:	e008      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e006      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e004      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2a:	4937      	ldr	r1, [pc, #220]	@ (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d38:	4b39      	ldr	r3, [pc, #228]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5c:	4a30      	ldr	r2, [pc, #192]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d62:	4b2f      	ldr	r3, [pc, #188]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d86:	4a26      	ldr	r2, [pc, #152]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d8c:	4b24      	ldr	r3, [pc, #144]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dda:	4a11      	ldr	r2, [pc, #68]	@ (8001e20 <HAL_GPIO_Init+0x300>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f ae9d 	bne.w	8001b30 <HAL_GPIO_Init+0x10>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	48000800 	.word	0x48000800
 8001e14:	48000c00 	.word	0x48000c00
 8001e18:	48001000 	.word	0x48001000
 8001e1c:	48001400 	.word	0x48001400
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6a:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f806 	bl	8001e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d141      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eb6:	d131      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb8:	4b47      	ldr	r3, [pc, #284]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ebe:	4a46      	ldr	r2, [pc, #280]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ec4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec8:	4b43      	ldr	r3, [pc, #268]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ed0:	4a41      	ldr	r2, [pc, #260]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ed8:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2232      	movs	r2, #50	@ 0x32
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9b      	lsrs	r3, r3, #18
 8001eea:	3301      	adds	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eee:	e002      	b.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef6:	4b38      	ldr	r3, [pc, #224]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f02:	d102      	bne.n	8001f0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f2      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f0a:	4b33      	ldr	r3, [pc, #204]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f16:	d158      	bne.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e057      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f22:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f2c:	e04d      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f34:	d141      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f36:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f42:	d131      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f44:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f4a:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f50:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	@ (8001fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2232      	movs	r2, #50	@ 0x32
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9b      	lsrs	r3, r3, #18
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f7a:	e002      	b.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f8e:	d102      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f2      	bne.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f96:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fa2:	d112      	bne.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e011      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fae:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fb8:	e007      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fba:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fc2:	4a05      	ldr	r2, [pc, #20]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a04      	ldr	r2, [pc, #16]	@ (8002000 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff2:	6093      	str	r3, [r2, #8]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40007000 	.word	0x40007000

08002004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e2fe      	b.n	8002614 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d075      	beq.n	800210e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002022:	4b97      	ldr	r3, [pc, #604]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202c:	4b94      	ldr	r3, [pc, #592]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d102      	bne.n	8002042 <HAL_RCC_OscConfig+0x3e>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d002      	beq.n	8002048 <HAL_RCC_OscConfig+0x44>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d10b      	bne.n	8002060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	4b8d      	ldr	r3, [pc, #564]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05b      	beq.n	800210c <HAL_RCC_OscConfig+0x108>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d157      	bne.n	800210c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e2d9      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x74>
 800206a:	4b85      	ldr	r3, [pc, #532]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a84      	ldr	r2, [pc, #528]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x98>
 8002082:	4b7f      	ldr	r3, [pc, #508]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b7c      	ldr	r3, [pc, #496]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7b      	ldr	r2, [pc, #492]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 800209c:	4b78      	ldr	r3, [pc, #480]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a77      	ldr	r2, [pc, #476]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b75      	ldr	r3, [pc, #468]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a74      	ldr	r2, [pc, #464]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f8c0 	bl	8001240 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff f8bc 	bl	8001240 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	@ 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e29e      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0xc0>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff f8ac 	bl	8001240 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff f8a8 	bl	8001240 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	@ 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e28a      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fe:	4b60      	ldr	r3, [pc, #384]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0xe8>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b59      	ldr	r3, [pc, #356]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b56      	ldr	r3, [pc, #344]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x136>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d002      	beq.n	8002140 <HAL_RCC_OscConfig+0x13c>
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d11f      	bne.n	8002180 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	4b4f      	ldr	r3, [pc, #316]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x154>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e25d      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b49      	ldr	r3, [pc, #292]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4946      	ldr	r1, [pc, #280]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800216c:	4b45      	ldr	r3, [pc, #276]	@ (8002284 <HAL_RCC_OscConfig+0x280>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff f819 	bl	80011a8 <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d043      	beq.n	8002204 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e249      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b3d      	ldr	r3, [pc, #244]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3c      	ldr	r2, [pc, #240]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f854 	bl	8001240 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff f850 	bl	8001240 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e232      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ae:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b31      	ldr	r3, [pc, #196]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	492d      	ldr	r1, [pc, #180]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
 80021ce:	e01a      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff f830 	bl	8001240 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7ff f82c 	bl	8001240 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e20e      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f6:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1e0>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d041      	beq.n	8002296 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b19      	ldr	r3, [pc, #100]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002220:	4a17      	ldr	r2, [pc, #92]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff f809 	bl	8001240 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff f805 	bl	8001240 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1e7      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002244:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ef      	beq.n	8002232 <HAL_RCC_OscConfig+0x22e>
 8002252:	e020      	b.n	8002296 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b0a      	ldr	r3, [pc, #40]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800225a:	4a09      	ldr	r2, [pc, #36]	@ (8002280 <HAL_RCC_OscConfig+0x27c>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7fe ffec 	bl	8001240 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226a:	e00d      	b.n	8002288 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7fe ffe8 	bl	8001240 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d906      	bls.n	8002288 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1ca      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002288:	4b8c      	ldr	r3, [pc, #560]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ea      	bne.n	800226c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80a6 	beq.w	80023f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022a8:	4b84      	ldr	r3, [pc, #528]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2b4>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x2b6>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b7f      	ldr	r3, [pc, #508]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	4a7e      	ldr	r2, [pc, #504]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80022ca:	4b7c      	ldr	r3, [pc, #496]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022da:	4b79      	ldr	r3, [pc, #484]	@ (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e6:	4b76      	ldr	r3, [pc, #472]	@ (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a75      	ldr	r2, [pc, #468]	@ (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe ffa5 	bl	8001240 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe ffa1 	bl	8001240 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e183      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	4b6c      	ldr	r3, [pc, #432]	@ (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_RCC_OscConfig+0x32e>
 8002320:	4b66      	ldr	r3, [pc, #408]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002326:	4a65      	ldr	r2, [pc, #404]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002330:	e024      	b.n	800237c <HAL_RCC_OscConfig+0x378>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d110      	bne.n	800235c <HAL_RCC_OscConfig+0x358>
 800233a:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002340:	4a5e      	ldr	r2, [pc, #376]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800234a:	4b5c      	ldr	r3, [pc, #368]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002350:	4a5a      	ldr	r2, [pc, #360]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x378>
 800235c:	4b57      	ldr	r3, [pc, #348]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002362:	4a56      	ldr	r2, [pc, #344]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800236c:	4b53      	ldr	r3, [pc, #332]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002372:	4a52      	ldr	r2, [pc, #328]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe ff5c 	bl	8001240 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe ff58 	bl	8001240 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e138      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	4b46      	ldr	r3, [pc, #280]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ed      	beq.n	800238c <HAL_RCC_OscConfig+0x388>
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe ff45 	bl	8001240 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe ff41 	bl	8001240 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e121      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	4b3a      	ldr	r3, [pc, #232]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ed      	bne.n	80023ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e4:	4b35      	ldr	r3, [pc, #212]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e8:	4a34      	ldr	r2, [pc, #208]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023ee:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03c      	beq.n	8002476 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01c      	beq.n	800243e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002404:	4b2d      	ldr	r3, [pc, #180]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002406:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800240a:	4a2c      	ldr	r2, [pc, #176]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe ff14 	bl	8001240 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800241c:	f7fe ff10 	bl	8001240 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0f2      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800242e:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCC_OscConfig+0x418>
 800243c:	e01b      	b.n	8002476 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800243e:	4b1f      	ldr	r3, [pc, #124]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002444:	4a1d      	ldr	r2, [pc, #116]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe fef7 	bl	8001240 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002456:	f7fe fef3 	bl	8001240 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0d5      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002468:	4b14      	ldr	r3, [pc, #80]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80c9 	beq.w	8002612 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002480:	4b0e      	ldr	r3, [pc, #56]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b0c      	cmp	r3, #12
 800248a:	f000 8083 	beq.w	8002594 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d15e      	bne.n	8002554 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a08      	ldr	r2, [pc, #32]	@ (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fecd 	bl	8001240 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a8:	e00c      	b.n	80024c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fec9 	bl	8001240 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d905      	bls.n	80024c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0ab      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c4:	4b55      	ldr	r3, [pc, #340]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ec      	bne.n	80024aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4b52      	ldr	r3, [pc, #328]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4b52      	ldr	r3, [pc, #328]	@ (8002620 <HAL_RCC_OscConfig+0x61c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6a11      	ldr	r1, [r2, #32]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024e0:	3a01      	subs	r2, #1
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	4311      	orrs	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024ea:	0212      	lsls	r2, r2, #8
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0552      	lsls	r2, r2, #21
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024fe:	0852      	lsrs	r2, r2, #1
 8002500:	3a01      	subs	r2, #1
 8002502:	0652      	lsls	r2, r2, #25
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800250a:	06d2      	lsls	r2, r2, #27
 800250c:	430a      	orrs	r2, r1
 800250e:	4943      	ldr	r1, [pc, #268]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 8002510:	4313      	orrs	r3, r2
 8002512:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b41      	ldr	r3, [pc, #260]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a40      	ldr	r2, [pc, #256]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	4b3e      	ldr	r3, [pc, #248]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a3d      	ldr	r2, [pc, #244]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fe88 	bl	8001240 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fe84 	bl	8001240 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e066      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	4b35      	ldr	r3, [pc, #212]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x530>
 8002552:	e05e      	b.n	8002612 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002554:	4b31      	ldr	r3, [pc, #196]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a30      	ldr	r2, [pc, #192]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 800255a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800255e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fe6e 	bl	8001240 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe fe6a 	bl	8001240 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e04c      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257a:	4b28      	ldr	r3, [pc, #160]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002586:	4b25      	ldr	r3, [pc, #148]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4924      	ldr	r1, [pc, #144]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 800258c:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <HAL_RCC_OscConfig+0x620>)
 800258e:	4013      	ands	r3, r2
 8002590:	60cb      	str	r3, [r1, #12]
 8002592:	e03e      	b.n	8002612 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e039      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025a0:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <HAL_RCC_OscConfig+0x618>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d12c      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025be:	3b01      	subs	r3, #1
 80025c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d123      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d11b      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d113      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d109      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	3b01      	subs	r3, #1
 8002608:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	019f800c 	.word	0x019f800c
 8002624:	feeefffc 	.word	0xfeeefffc

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e11e      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b91      	ldr	r3, [pc, #580]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b8e      	ldr	r3, [pc, #568]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	498c      	ldr	r1, [pc, #560]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b8a      	ldr	r3, [pc, #552]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e106      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d073      	beq.n	8002764 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d129      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002684:	4b81      	ldr	r3, [pc, #516]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0f4      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002694:	f000 f99e 	bl	80029d4 <RCC_GetSysClockFreqFromPLLSource>
 8002698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a7c      	ldr	r2, [pc, #496]	@ (8002890 <HAL_RCC_ClockConfig+0x268>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d93f      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026a2:	4b7a      	ldr	r3, [pc, #488]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d033      	beq.n	8002722 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d12f      	bne.n	8002722 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026c2:	4b72      	ldr	r3, [pc, #456]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ca:	4a70      	ldr	r2, [pc, #448]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e024      	b.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e0:	4b6a      	ldr	r3, [pc, #424]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0c6      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	4b66      	ldr	r3, [pc, #408]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0be      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002700:	f000 f8ce 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4a61      	ldr	r2, [pc, #388]	@ (8002890 <HAL_RCC_ClockConfig+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d909      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800270e:	4b5f      	ldr	r3, [pc, #380]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002716:	4a5d      	ldr	r2, [pc, #372]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800271e:	2380      	movs	r3, #128	@ 0x80
 8002720:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b5a      	ldr	r3, [pc, #360]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4957      	ldr	r1, [pc, #348]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fd84 	bl	8001240 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fd80 	bl	8001240 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e095      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b4e      	ldr	r3, [pc, #312]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d023      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b43      	ldr	r3, [pc, #268]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a42      	ldr	r2, [pc, #264]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002786:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002794:	4b3d      	ldr	r3, [pc, #244]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800279c:	4a3b      	ldr	r2, [pc, #236]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800279e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80027a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b39      	ldr	r3, [pc, #228]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4936      	ldr	r1, [pc, #216]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
 80027b6:	e008      	b.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b80      	cmp	r3, #128	@ 0x80
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027be:	4b33      	ldr	r3, [pc, #204]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4a32      	ldr	r2, [pc, #200]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d21d      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 020f 	bic.w	r2, r3, #15
 80027e0:	4929      	ldr	r1, [pc, #164]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fd2a 	bl	8001240 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fd26 	bl	8001240 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e03b      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ed      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4917      	ldr	r1, [pc, #92]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b13      	ldr	r3, [pc, #76]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490f      	ldr	r1, [pc, #60]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002852:	f000 f825 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0c      	ldr	r3, [pc, #48]	@ (800288c <HAL_RCC_ClockConfig+0x264>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490c      	ldr	r1, [pc, #48]	@ (8002894 <HAL_RCC_ClockConfig+0x26c>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a0a      	ldr	r2, [pc, #40]	@ (8002898 <HAL_RCC_ClockConfig+0x270>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002872:	4b0a      	ldr	r3, [pc, #40]	@ (800289c <HAL_RCC_ClockConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fc96 	bl	80011a8 <HAL_InitTick>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	04c4b400 	.word	0x04c4b400
 8002894:	08004ad4 	.word	0x08004ad4
 8002898:	20000000 	.word	0x20000000
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b2:	4b2a      	ldr	r3, [pc, #168]	@ (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e047      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028b8:	4b27      	ldr	r3, [pc, #156]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e03e      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028ca:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d136      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3301      	adds	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4a16      	ldr	r2, [pc, #88]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	0a12      	lsrs	r2, r2, #8
 8002902:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
      break;
 800290c:	e00c      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290e:	4a13      	ldr	r2, [pc, #76]	@ (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4a10      	ldr	r2, [pc, #64]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	0a12      	lsrs	r2, r2, #8
 800291c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
      break;
 8002926:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0e5b      	lsrs	r3, r3, #25
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	e001      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002948:	693b      	ldr	r3, [r7, #16]
}
 800294a:	4618      	mov	r0, r3
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	00f42400 	.word	0x00f42400
 8002960:	016e3600 	.word	0x016e3600

08002964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002980:	f7ff fff0 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4904      	ldr	r1, [pc, #16]	@ (80029a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08004ae4 	.word	0x08004ae4

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029ac:	f7ff ffda 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0adb      	lsrs	r3, r3, #11
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4904      	ldr	r1, [pc, #16]	@ (80029d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08004ae4 	.word	0x08004ae4

080029d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029da:	4b1e      	ldr	r3, [pc, #120]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	3301      	adds	r3, #1
 80029f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d10c      	bne.n	8002a12 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f8:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	4a14      	ldr	r2, [pc, #80]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a02:	68d2      	ldr	r2, [r2, #12]
 8002a04:	0a12      	lsrs	r2, r2, #8
 8002a06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	617b      	str	r3, [r7, #20]
    break;
 8002a10:	e00c      	b.n	8002a2c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a12:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a1c:	68d2      	ldr	r2, [r2, #12]
 8002a1e:	0a12      	lsrs	r2, r2, #8
 8002a20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
    break;
 8002a2a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a2c:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0e5b      	lsrs	r3, r3, #25
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a46:	687b      	ldr	r3, [r7, #4]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40021000 	.word	0x40021000
 8002a58:	016e3600 	.word	0x016e3600
 8002a5c:	00f42400 	.word	0x00f42400

08002a60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a68:	2300      	movs	r3, #0
 8002a6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8098 	beq.w	8002bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a82:	4b43      	ldr	r3, [pc, #268]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10d      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8e:	4b40      	ldr	r3, [pc, #256]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	4a3f      	ldr	r2, [pc, #252]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a39      	ldr	r2, [pc, #228]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ab4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe fbc3 	bl	8001240 <HAL_GetTick>
 8002aba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002abc:	e009      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abe:	f7fe fbbf 	bl	8001240 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d902      	bls.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	74fb      	strb	r3, [r7, #19]
        break;
 8002ad0:	e005      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad2:	4b30      	ldr	r3, [pc, #192]	@ (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0ef      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ade:	7cfb      	ldrb	r3, [r7, #19]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d159      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01e      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d019      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b00:	4b23      	ldr	r3, [pc, #140]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b0c:	4b20      	ldr	r3, [pc, #128]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a1f      	ldr	r2, [pc, #124]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b22:	4a1b      	ldr	r2, [pc, #108]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b2c:	4a18      	ldr	r2, [pc, #96]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d016      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb7f 	bl	8001240 <HAL_GetTick>
 8002b42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b44:	e00b      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7fe fb7b 	bl	8001240 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d902      	bls.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	74fb      	strb	r3, [r7, #19]
            break;
 8002b5c:	e006      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ec      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b6c:	7cfb      	ldrb	r3, [r7, #19]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b72:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b80:	4903      	ldr	r1, [pc, #12]	@ (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b88:	e008      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	74bb      	strb	r3, [r7, #18]
 8002b8e:	e005      	b.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b9c:	7c7b      	ldrb	r3, [r7, #17]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba2:	4ba7      	ldr	r3, [pc, #668]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	4aa6      	ldr	r2, [pc, #664]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bba:	4ba1      	ldr	r3, [pc, #644]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc0:	f023 0203 	bic.w	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	499d      	ldr	r1, [pc, #628]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0302 	and.w	r3, r3, #2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bdc:	4b98      	ldr	r3, [pc, #608]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be2:	f023 020c 	bic.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	4995      	ldr	r1, [pc, #596]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bfe:	4b90      	ldr	r3, [pc, #576]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	498c      	ldr	r1, [pc, #560]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c20:	4b87      	ldr	r3, [pc, #540]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c26:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	4984      	ldr	r1, [pc, #528]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0310 	and.w	r3, r3, #16
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c42:	4b7f      	ldr	r3, [pc, #508]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	497b      	ldr	r1, [pc, #492]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c64:	4b76      	ldr	r3, [pc, #472]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	4973      	ldr	r1, [pc, #460]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c86:	4b6e      	ldr	r3, [pc, #440]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	496a      	ldr	r1, [pc, #424]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ca8:	4b65      	ldr	r3, [pc, #404]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	4962      	ldr	r1, [pc, #392]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cca:	4b5d      	ldr	r3, [pc, #372]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	4959      	ldr	r1, [pc, #356]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cec:	4b54      	ldr	r3, [pc, #336]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cf2:	f023 0203 	bic.w	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	4951      	ldr	r1, [pc, #324]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d14:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	4948      	ldr	r1, [pc, #288]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d015      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d30:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d36:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	4940      	ldr	r1, [pc, #256]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d50:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a3a      	ldr	r2, [pc, #232]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d68:	4b35      	ldr	r3, [pc, #212]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d76:	4932      	ldr	r1, [pc, #200]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d88:	4b2d      	ldr	r3, [pc, #180]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d92:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002da0:	4b27      	ldr	r3, [pc, #156]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dae:	4924      	ldr	r1, [pc, #144]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d015      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de6:	4916      	ldr	r1, [pc, #88]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002df6:	d105      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df8:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a10      	ldr	r2, [pc, #64]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d019      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e16:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	4908      	ldr	r1, [pc, #32]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e2e:	d109      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e30:	4b03      	ldr	r3, [pc, #12]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4a02      	ldr	r2, [pc, #8]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e3a:	60d3      	str	r3, [r2, #12]
 8002e3c:	e002      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d015      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e50:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	4926      	ldr	r1, [pc, #152]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e70:	4b21      	ldr	r3, [pc, #132]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a20      	ldr	r2, [pc, #128]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d015      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e96:	4918      	ldr	r1, [pc, #96]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ea6:	d105      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d015      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ec6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ece:	490a      	ldr	r1, [pc, #40]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002eda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ede:	d105      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee0:	4b05      	ldr	r3, [pc, #20]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4a04      	ldr	r2, [pc, #16]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002eec:	7cbb      	ldrb	r3, [r7, #18]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e042      	b.n	8002f94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d106      	bne.n	8002f26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fd fe21 	bl	8000b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2224      	movs	r2, #36	@ 0x24
 8002f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fef0 	bl	8003d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fbf1 	bl	8003734 <UART_SetConfig>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01b      	b.n	8002f94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 ff6f 	bl	8003e70 <UART_CheckIdleState>
 8002f92:	4603      	mov	r3, r0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	@ 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d167      	bne.n	8003084 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Transmit_DMA+0x24>
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e060      	b.n	8003086 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	88fa      	ldrh	r2, [r7, #6]
 8002fce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	88fa      	ldrh	r2, [r7, #6]
 8002fd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2221      	movs	r2, #33	@ 0x21
 8002fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d028      	beq.n	8003044 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ff6:	4a26      	ldr	r2, [pc, #152]	@ (8003090 <HAL_UART_Transmit_DMA+0xf4>)
 8002ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ffe:	4a25      	ldr	r2, [pc, #148]	@ (8003094 <HAL_UART_Transmit_DMA+0xf8>)
 8003000:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003006:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <HAL_UART_Transmit_DMA+0xfc>)
 8003008:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800300e:	2200      	movs	r2, #0
 8003010:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800301a:	4619      	mov	r1, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3328      	adds	r3, #40	@ 0x28
 8003022:	461a      	mov	r2, r3
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	f7fe faf1 	bl	800160c <HAL_DMA_Start_IT>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d009      	beq.n	8003044 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2210      	movs	r2, #16
 8003034:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e020      	b.n	8003086 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2240      	movs	r2, #64	@ 0x40
 800304a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3308      	adds	r3, #8
 8003052:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	613b      	str	r3, [r7, #16]
   return(result);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3308      	adds	r3, #8
 800306a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306c:	623a      	str	r2, [r7, #32]
 800306e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003070:	69f9      	ldr	r1, [r7, #28]
 8003072:	6a3a      	ldr	r2, [r7, #32]
 8003074:	e841 2300 	strex	r3, r2, [r1]
 8003078:	61bb      	str	r3, [r7, #24]
   return(result);
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e5      	bne.n	800304c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3728      	adds	r7, #40	@ 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	0800433b 	.word	0x0800433b
 8003094:	080043d5 	.word	0x080043d5
 8003098:	0800455b 	.word	0x0800455b

0800309c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ba      	sub	sp, #232	@ 0xe8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80030ca:	4013      	ands	r3, r2
 80030cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80030d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d11b      	bne.n	8003110 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80030d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80030e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 82e3 	beq.w	80036cc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4798      	blx	r3
      }
      return;
 800310e:	e2dd      	b.n	80036cc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003110:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 8123 	beq.w	8003360 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800311a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800311e:	4b8d      	ldr	r3, [pc, #564]	@ (8003354 <HAL_UART_IRQHandler+0x2b8>)
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003126:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800312a:	4b8b      	ldr	r3, [pc, #556]	@ (8003358 <HAL_UART_IRQHandler+0x2bc>)
 800312c:	4013      	ands	r3, r2
 800312e:	2b00      	cmp	r3, #0
 8003130:	f000 8116 	beq.w	8003360 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d011      	beq.n	8003164 <HAL_UART_IRQHandler+0xc8>
 8003140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800315a:	f043 0201 	orr.w	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d011      	beq.n	8003194 <HAL_UART_IRQHandler+0xf8>
 8003170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2202      	movs	r2, #2
 8003182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f043 0204 	orr.w	r2, r3, #4
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d011      	beq.n	80031c4 <HAL_UART_IRQHandler+0x128>
 80031a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00b      	beq.n	80031c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2204      	movs	r2, #4
 80031b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ba:	f043 0202 	orr.w	r2, r3, #2
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d017      	beq.n	8003200 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80031dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80031e0:	4b5c      	ldr	r3, [pc, #368]	@ (8003354 <HAL_UART_IRQHandler+0x2b8>)
 80031e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00b      	beq.n	8003200 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2208      	movs	r2, #8
 80031ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003204:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_UART_IRQHandler+0x196>
 800320c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003210:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003220:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003238:	2b00      	cmp	r3, #0
 800323a:	f000 8249 	beq.w	80036d0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800323e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d013      	beq.n	8003272 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800324a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d105      	bne.n	8003262 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800325a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003286:	2b40      	cmp	r3, #64	@ 0x40
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800328a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800328e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003292:	2b00      	cmp	r3, #0
 8003294:	d054      	beq.n	8003340 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 ffe9 	bl	800426e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a6:	2b40      	cmp	r3, #64	@ 0x40
 80032a8:	d146      	bne.n	8003338 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3308      	adds	r3, #8
 80032b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3308      	adds	r3, #8
 80032d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032d6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1d9      	bne.n	80032aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d017      	beq.n	8003330 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003306:	4a15      	ldr	r2, [pc, #84]	@ (800335c <HAL_UART_IRQHandler+0x2c0>)
 8003308:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003310:	4618      	mov	r0, r3
 8003312:	f7fe fa4f 	bl	80017b4 <HAL_DMA_Abort_IT>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d019      	beq.n	8003350 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800332a:	4610      	mov	r0, r2
 800332c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332e:	e00f      	b.n	8003350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f9f5 	bl	8003720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003336:	e00b      	b.n	8003350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f9f1 	bl	8003720 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333e:	e007      	b.n	8003350 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f9ed 	bl	8003720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800334e:	e1bf      	b.n	80036d0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	bf00      	nop
    return;
 8003352:	e1bd      	b.n	80036d0 <HAL_UART_IRQHandler+0x634>
 8003354:	10000001 	.word	0x10000001
 8003358:	04000120 	.word	0x04000120
 800335c:	080045db 	.word	0x080045db

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003364:	2b01      	cmp	r3, #1
 8003366:	f040 8153 	bne.w	8003610 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800336a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 814c 	beq.w	8003610 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8145 	beq.w	8003610 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2210      	movs	r2, #16
 800338c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003398:	2b40      	cmp	r3, #64	@ 0x40
 800339a:	f040 80bb 	bne.w	8003514 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 818f 	beq.w	80036d4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80033bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033c0:	429a      	cmp	r2, r3
 80033c2:	f080 8187 	bcs.w	80036d4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f040 8087 	bne.w	80034f2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003400:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800340e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003412:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003416:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800341a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003426:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1da      	bne.n	80033e4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3308      	adds	r3, #8
 8003434:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003438:	e853 3f00 	ldrex	r3, [r3]
 800343c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800343e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3308      	adds	r3, #8
 800344e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003452:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003456:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003458:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800345a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800345e:	e841 2300 	strex	r3, r2, [r1]
 8003462:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1e1      	bne.n	800342e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3308      	adds	r3, #8
 8003470:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003472:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003474:	e853 3f00 	ldrex	r3, [r3]
 8003478:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800347a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800347c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003480:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3308      	adds	r3, #8
 800348a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800348e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003490:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003494:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800349c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e3      	bne.n	800346a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034b8:	e853 3f00 	ldrex	r3, [r3]
 80034bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034c0:	f023 0310 	bic.w	r3, r3, #16
 80034c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e4      	bne.n	80034b0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe f908 	bl	8001702 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003504:	b29b      	uxth	r3, r3
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	b29b      	uxth	r3, r3
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7fd fc47 	bl	8000da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003512:	e0df      	b.n	80036d4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8003520:	b29b      	uxth	r3, r3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	f000 80d1 	beq.w	80036d8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003536:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800353a:	2b00      	cmp	r3, #0
 800353c:	f000 80cc 	beq.w	80036d8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003548:	e853 3f00 	ldrex	r3, [r3]
 800354c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003554:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003562:	647b      	str	r3, [r7, #68]	@ 0x44
 8003564:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003566:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003568:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800356a:	e841 2300 	strex	r3, r2, [r1]
 800356e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1e4      	bne.n	8003540 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3308      	adds	r3, #8
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	623b      	str	r3, [r7, #32]
   return(result);
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800358c:	f023 0301 	bic.w	r3, r3, #1
 8003590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3308      	adds	r3, #8
 800359a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800359e:	633a      	str	r2, [r7, #48]	@ 0x30
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e1      	bne.n	8003576 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0310 	bic.w	r3, r3, #16
 80035da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	461a      	mov	r2, r3
 80035e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035e8:	61fb      	str	r3, [r7, #28]
 80035ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	69b9      	ldr	r1, [r7, #24]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	617b      	str	r3, [r7, #20]
   return(result);
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e4      	bne.n	80035c6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fd fbc9 	bl	8000da0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800360e:	e063      	b.n	80036d8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003614:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00e      	beq.n	800363a <HAL_UART_IRQHandler+0x59e>
 800361c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d008      	beq.n	800363a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f001 f812 	bl	800465c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003638:	e051      	b.n	80036de <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800363a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b00      	cmp	r3, #0
 8003644:	d014      	beq.n	8003670 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800364a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364e:	2b00      	cmp	r3, #0
 8003650:	d105      	bne.n	800365e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003662:	2b00      	cmp	r3, #0
 8003664:	d03a      	beq.n	80036dc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	4798      	blx	r3
    }
    return;
 800366e:	e035      	b.n	80036dc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_UART_IRQHandler+0x5f4>
 800367c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 ffbc 	bl	8004606 <UART_EndTransmit_IT>
    return;
 800368e:	e026      	b.n	80036de <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_UART_IRQHandler+0x614>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 ffeb 	bl	8004684 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036ae:	e016      	b.n	80036de <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_UART_IRQHandler+0x642>
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	da0c      	bge.n	80036de <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 ffd3 	bl	8004670 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036ca:	e008      	b.n	80036de <HAL_UART_IRQHandler+0x642>
      return;
 80036cc:	bf00      	nop
 80036ce:	e006      	b.n	80036de <HAL_UART_IRQHandler+0x642>
    return;
 80036d0:	bf00      	nop
 80036d2:	e004      	b.n	80036de <HAL_UART_IRQHandler+0x642>
      return;
 80036d4:	bf00      	nop
 80036d6:	e002      	b.n	80036de <HAL_UART_IRQHandler+0x642>
      return;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_UART_IRQHandler+0x642>
    return;
 80036dc:	bf00      	nop
  }
}
 80036de:	37e8      	adds	r7, #232	@ 0xe8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003738:	b08c      	sub	sp, #48	@ 0x30
 800373a:	af00      	add	r7, sp, #0
 800373c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	431a      	orrs	r2, r3
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	431a      	orrs	r2, r3
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4313      	orrs	r3, r2
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	4baa      	ldr	r3, [pc, #680]	@ (8003a0c <UART_SetConfig+0x2d8>)
 8003764:	4013      	ands	r3, r2
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	6812      	ldr	r2, [r2, #0]
 800376a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800376c:	430b      	orrs	r3, r1
 800376e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a9f      	ldr	r2, [pc, #636]	@ (8003a10 <UART_SetConfig+0x2dc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d004      	beq.n	80037a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800379c:	4313      	orrs	r3, r2
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80037aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	6812      	ldr	r2, [r2, #0]
 80037b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037b4:	430b      	orrs	r3, r1
 80037b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	f023 010f 	bic.w	r1, r3, #15
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a90      	ldr	r2, [pc, #576]	@ (8003a14 <UART_SetConfig+0x2e0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d125      	bne.n	8003824 <UART_SetConfig+0xf0>
 80037d8:	4b8f      	ldr	r3, [pc, #572]	@ (8003a18 <UART_SetConfig+0x2e4>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037de:	f003 0303 	and.w	r3, r3, #3
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d81a      	bhi.n	800381c <UART_SetConfig+0xe8>
 80037e6:	a201      	add	r2, pc, #4	@ (adr r2, 80037ec <UART_SetConfig+0xb8>)
 80037e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ec:	080037fd 	.word	0x080037fd
 80037f0:	0800380d 	.word	0x0800380d
 80037f4:	08003805 	.word	0x08003805
 80037f8:	08003815 	.word	0x08003815
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003802:	e116      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003804:	2302      	movs	r3, #2
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800380a:	e112      	b.n	8003a32 <UART_SetConfig+0x2fe>
 800380c:	2304      	movs	r3, #4
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003812:	e10e      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003814:	2308      	movs	r3, #8
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800381a:	e10a      	b.n	8003a32 <UART_SetConfig+0x2fe>
 800381c:	2310      	movs	r3, #16
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003822:	e106      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a7c      	ldr	r2, [pc, #496]	@ (8003a1c <UART_SetConfig+0x2e8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d138      	bne.n	80038a0 <UART_SetConfig+0x16c>
 800382e:	4b7a      	ldr	r3, [pc, #488]	@ (8003a18 <UART_SetConfig+0x2e4>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003834:	f003 030c 	and.w	r3, r3, #12
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d82d      	bhi.n	8003898 <UART_SetConfig+0x164>
 800383c:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <UART_SetConfig+0x110>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003879 	.word	0x08003879
 8003848:	08003899 	.word	0x08003899
 800384c:	08003899 	.word	0x08003899
 8003850:	08003899 	.word	0x08003899
 8003854:	08003889 	.word	0x08003889
 8003858:	08003899 	.word	0x08003899
 800385c:	08003899 	.word	0x08003899
 8003860:	08003899 	.word	0x08003899
 8003864:	08003881 	.word	0x08003881
 8003868:	08003899 	.word	0x08003899
 800386c:	08003899 	.word	0x08003899
 8003870:	08003899 	.word	0x08003899
 8003874:	08003891 	.word	0x08003891
 8003878:	2300      	movs	r3, #0
 800387a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800387e:	e0d8      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003880:	2302      	movs	r3, #2
 8003882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003886:	e0d4      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003888:	2304      	movs	r3, #4
 800388a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800388e:	e0d0      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003890:	2308      	movs	r3, #8
 8003892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003896:	e0cc      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003898:	2310      	movs	r3, #16
 800389a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800389e:	e0c8      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003a20 <UART_SetConfig+0x2ec>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d125      	bne.n	80038f6 <UART_SetConfig+0x1c2>
 80038aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003a18 <UART_SetConfig+0x2e4>)
 80038ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80038b4:	2b30      	cmp	r3, #48	@ 0x30
 80038b6:	d016      	beq.n	80038e6 <UART_SetConfig+0x1b2>
 80038b8:	2b30      	cmp	r3, #48	@ 0x30
 80038ba:	d818      	bhi.n	80038ee <UART_SetConfig+0x1ba>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d00a      	beq.n	80038d6 <UART_SetConfig+0x1a2>
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d814      	bhi.n	80038ee <UART_SetConfig+0x1ba>
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <UART_SetConfig+0x19a>
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d008      	beq.n	80038de <UART_SetConfig+0x1aa>
 80038cc:	e00f      	b.n	80038ee <UART_SetConfig+0x1ba>
 80038ce:	2300      	movs	r3, #0
 80038d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d4:	e0ad      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80038d6:	2302      	movs	r3, #2
 80038d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038dc:	e0a9      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80038de:	2304      	movs	r3, #4
 80038e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e4:	e0a5      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80038e6:	2308      	movs	r3, #8
 80038e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ec:	e0a1      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80038ee:	2310      	movs	r3, #16
 80038f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038f4:	e09d      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003a24 <UART_SetConfig+0x2f0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d125      	bne.n	800394c <UART_SetConfig+0x218>
 8003900:	4b45      	ldr	r3, [pc, #276]	@ (8003a18 <UART_SetConfig+0x2e4>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800390a:	2bc0      	cmp	r3, #192	@ 0xc0
 800390c:	d016      	beq.n	800393c <UART_SetConfig+0x208>
 800390e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003910:	d818      	bhi.n	8003944 <UART_SetConfig+0x210>
 8003912:	2b80      	cmp	r3, #128	@ 0x80
 8003914:	d00a      	beq.n	800392c <UART_SetConfig+0x1f8>
 8003916:	2b80      	cmp	r3, #128	@ 0x80
 8003918:	d814      	bhi.n	8003944 <UART_SetConfig+0x210>
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <UART_SetConfig+0x1f0>
 800391e:	2b40      	cmp	r3, #64	@ 0x40
 8003920:	d008      	beq.n	8003934 <UART_SetConfig+0x200>
 8003922:	e00f      	b.n	8003944 <UART_SetConfig+0x210>
 8003924:	2300      	movs	r3, #0
 8003926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392a:	e082      	b.n	8003a32 <UART_SetConfig+0x2fe>
 800392c:	2302      	movs	r3, #2
 800392e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003932:	e07e      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003934:	2304      	movs	r3, #4
 8003936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393a:	e07a      	b.n	8003a32 <UART_SetConfig+0x2fe>
 800393c:	2308      	movs	r3, #8
 800393e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003942:	e076      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003944:	2310      	movs	r3, #16
 8003946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394a:	e072      	b.n	8003a32 <UART_SetConfig+0x2fe>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a35      	ldr	r2, [pc, #212]	@ (8003a28 <UART_SetConfig+0x2f4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d12a      	bne.n	80039ac <UART_SetConfig+0x278>
 8003956:	4b30      	ldr	r3, [pc, #192]	@ (8003a18 <UART_SetConfig+0x2e4>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003964:	d01a      	beq.n	800399c <UART_SetConfig+0x268>
 8003966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800396a:	d81b      	bhi.n	80039a4 <UART_SetConfig+0x270>
 800396c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003970:	d00c      	beq.n	800398c <UART_SetConfig+0x258>
 8003972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003976:	d815      	bhi.n	80039a4 <UART_SetConfig+0x270>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <UART_SetConfig+0x250>
 800397c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003980:	d008      	beq.n	8003994 <UART_SetConfig+0x260>
 8003982:	e00f      	b.n	80039a4 <UART_SetConfig+0x270>
 8003984:	2300      	movs	r3, #0
 8003986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398a:	e052      	b.n	8003a32 <UART_SetConfig+0x2fe>
 800398c:	2302      	movs	r3, #2
 800398e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003992:	e04e      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003994:	2304      	movs	r3, #4
 8003996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399a:	e04a      	b.n	8003a32 <UART_SetConfig+0x2fe>
 800399c:	2308      	movs	r3, #8
 800399e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039a2:	e046      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80039a4:	2310      	movs	r3, #16
 80039a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039aa:	e042      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <UART_SetConfig+0x2dc>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d13a      	bne.n	8003a2c <UART_SetConfig+0x2f8>
 80039b6:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <UART_SetConfig+0x2e4>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80039c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039c4:	d01a      	beq.n	80039fc <UART_SetConfig+0x2c8>
 80039c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ca:	d81b      	bhi.n	8003a04 <UART_SetConfig+0x2d0>
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d0:	d00c      	beq.n	80039ec <UART_SetConfig+0x2b8>
 80039d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d6:	d815      	bhi.n	8003a04 <UART_SetConfig+0x2d0>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <UART_SetConfig+0x2b0>
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e0:	d008      	beq.n	80039f4 <UART_SetConfig+0x2c0>
 80039e2:	e00f      	b.n	8003a04 <UART_SetConfig+0x2d0>
 80039e4:	2300      	movs	r3, #0
 80039e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ea:	e022      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80039ec:	2302      	movs	r3, #2
 80039ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039f2:	e01e      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80039f4:	2304      	movs	r3, #4
 80039f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039fa:	e01a      	b.n	8003a32 <UART_SetConfig+0x2fe>
 80039fc:	2308      	movs	r3, #8
 80039fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a02:	e016      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003a04:	2310      	movs	r3, #16
 8003a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003a0a:	e012      	b.n	8003a32 <UART_SetConfig+0x2fe>
 8003a0c:	cfff69f3 	.word	0xcfff69f3
 8003a10:	40008000 	.word	0x40008000
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40004400 	.word	0x40004400
 8003a20:	40004800 	.word	0x40004800
 8003a24:	40004c00 	.word	0x40004c00
 8003a28:	40005000 	.word	0x40005000
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4aae      	ldr	r2, [pc, #696]	@ (8003cf0 <UART_SetConfig+0x5bc>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	f040 8097 	bne.w	8003b6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d823      	bhi.n	8003a8e <UART_SetConfig+0x35a>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <UART_SetConfig+0x318>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a8f 	.word	0x08003a8f
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a8f 	.word	0x08003a8f
 8003a5c:	08003a7f 	.word	0x08003a7f
 8003a60:	08003a8f 	.word	0x08003a8f
 8003a64:	08003a8f 	.word	0x08003a8f
 8003a68:	08003a8f 	.word	0x08003a8f
 8003a6c:	08003a87 	.word	0x08003a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a70:	f7fe ff84 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a76:	e010      	b.n	8003a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a78:	4b9e      	ldr	r3, [pc, #632]	@ (8003cf4 <UART_SetConfig+0x5c0>)
 8003a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a7c:	e00d      	b.n	8003a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a7e:	f7fe ff0f 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003a82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a84:	e009      	b.n	8003a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a8c:	e005      	b.n	8003a9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8130 	beq.w	8003d02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	4a94      	ldr	r2, [pc, #592]	@ (8003cf8 <UART_SetConfig+0x5c4>)
 8003aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aac:	461a      	mov	r2, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	685a      	ldr	r2, [r3, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d305      	bcc.n	8003ad2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d903      	bls.n	8003ada <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003ad8:	e113      	b.n	8003d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	2200      	movs	r2, #0
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	60fa      	str	r2, [r7, #12]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae6:	4a84      	ldr	r2, [pc, #528]	@ (8003cf8 <UART_SetConfig+0x5c4>)
 8003ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003afc:	f7fc fb8c 	bl	8000218 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4610      	mov	r0, r2
 8003b06:	4619      	mov	r1, r3
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	020b      	lsls	r3, r1, #8
 8003b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b16:	0202      	lsls	r2, r0, #8
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	6849      	ldr	r1, [r1, #4]
 8003b1c:	0849      	lsrs	r1, r1, #1
 8003b1e:	2000      	movs	r0, #0
 8003b20:	460c      	mov	r4, r1
 8003b22:	4605      	mov	r5, r0
 8003b24:	eb12 0804 	adds.w	r8, r2, r4
 8003b28:	eb43 0905 	adc.w	r9, r3, r5
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	469a      	mov	sl, r3
 8003b34:	4693      	mov	fp, r2
 8003b36:	4652      	mov	r2, sl
 8003b38:	465b      	mov	r3, fp
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	f7fc fb6b 	bl	8000218 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4613      	mov	r3, r2
 8003b48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b50:	d308      	bcc.n	8003b64 <UART_SetConfig+0x430>
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b58:	d204      	bcs.n	8003b64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a3a      	ldr	r2, [r7, #32]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	e0ce      	b.n	8003d02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b6a:	e0ca      	b.n	8003d02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	69db      	ldr	r3, [r3, #28]
 8003b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b74:	d166      	bne.n	8003c44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003b76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d827      	bhi.n	8003bce <UART_SetConfig+0x49a>
 8003b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <UART_SetConfig+0x450>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bcf 	.word	0x08003bcf
 8003b94:	08003bbf 	.word	0x08003bbf
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bcf 	.word	0x08003bcf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7fe fee8 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bae:	e014      	b.n	8003bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7fe fefa 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8003bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bb6:	e010      	b.n	8003bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf4 <UART_SetConfig+0x5c0>)
 8003bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bbc:	e00d      	b.n	8003bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7fe fe6f 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003bc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003bc4:	e009      	b.n	8003bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003bcc:	e005      	b.n	8003bda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8090 	beq.w	8003d02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be6:	4a44      	ldr	r2, [pc, #272]	@ (8003cf8 <UART_SetConfig+0x5c4>)
 8003be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bec:	461a      	mov	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bf4:	005a      	lsls	r2, r3, #1
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	085b      	lsrs	r3, r3, #1
 8003bfc:	441a      	add	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	2b0f      	cmp	r3, #15
 8003c0c:	d916      	bls.n	8003c3c <UART_SetConfig+0x508>
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c14:	d212      	bcs.n	8003c3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f023 030f 	bic.w	r3, r3, #15
 8003c1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	8bfb      	ldrh	r3, [r7, #30]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	8bfa      	ldrh	r2, [r7, #30]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	e062      	b.n	8003d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003c42:	e05e      	b.n	8003d02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d828      	bhi.n	8003c9e <UART_SetConfig+0x56a>
 8003c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <UART_SetConfig+0x520>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c79 	.word	0x08003c79
 8003c58:	08003c81 	.word	0x08003c81
 8003c5c:	08003c89 	.word	0x08003c89
 8003c60:	08003c9f 	.word	0x08003c9f
 8003c64:	08003c8f 	.word	0x08003c8f
 8003c68:	08003c9f 	.word	0x08003c9f
 8003c6c:	08003c9f 	.word	0x08003c9f
 8003c70:	08003c9f 	.word	0x08003c9f
 8003c74:	08003c97 	.word	0x08003c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c78:	f7fe fe80 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8003c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c7e:	e014      	b.n	8003caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c80:	f7fe fe92 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 8003c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c86:	e010      	b.n	8003caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c88:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <UART_SetConfig+0x5c0>)
 8003c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c8c:	e00d      	b.n	8003caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c8e:	f7fe fe07 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8003c92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c94:	e009      	b.n	8003caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c9c:	e005      	b.n	8003caa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8003caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d028      	beq.n	8003d02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb4:	4a10      	ldr	r2, [pc, #64]	@ (8003cf8 <UART_SetConfig+0x5c4>)
 8003cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	441a      	add	r2, r3
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d910      	bls.n	8003cfc <UART_SetConfig+0x5c8>
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce0:	d20c      	bcs.n	8003cfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e009      	b.n	8003d02 <UART_SetConfig+0x5ce>
 8003cee:	bf00      	nop
 8003cf0:	40008000 	.word	0x40008000
 8003cf4:	00f42400 	.word	0x00f42400
 8003cf8:	08004aec 	.word	0x08004aec
      }
      else
      {
        ret = HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003d1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3730      	adds	r7, #48	@ 0x30
 8003d26:	46bd      	mov	sp, r7
 8003d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01a      	beq.n	8003e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e2a:	d10a      	bne.n	8003e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	605a      	str	r2, [r3, #4]
  }
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b098      	sub	sp, #96	@ 0x60
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e80:	f7fd f9de 	bl	8001240 <HAL_GetTick>
 8003e84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d12f      	bne.n	8003ef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f88e 	bl	8003fc4 <UART_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d022      	beq.n	8003ef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ece:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e6      	bne.n	8003eae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e063      	b.n	8003fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d149      	bne.n	8003f96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f857 	bl	8003fc4 <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d03c      	beq.n	8003f96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	623b      	str	r3, [r7, #32]
   return(result);
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e6      	bne.n	8003f1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3308      	adds	r3, #8
 8003f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f6e:	61fa      	str	r2, [r7, #28]
 8003f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	69b9      	ldr	r1, [r7, #24]
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e012      	b.n	8003fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3758      	adds	r7, #88	@ 0x58
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd4:	e04f      	b.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d04b      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fd f92f 	bl	8001240 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e04e      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0304 	and.w	r3, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d037      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b80      	cmp	r3, #128	@ 0x80
 800400a:	d034      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	2b40      	cmp	r3, #64	@ 0x40
 8004010:	d031      	beq.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	69db      	ldr	r3, [r3, #28]
 8004018:	f003 0308 	and.w	r3, r3, #8
 800401c:	2b08      	cmp	r3, #8
 800401e:	d110      	bne.n	8004042 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2208      	movs	r2, #8
 8004026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f920 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2208      	movs	r2, #8
 8004032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e029      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69db      	ldr	r3, [r3, #28]
 8004048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800404c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004050:	d111      	bne.n	8004076 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800405a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f906 	bl	800426e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2220      	movs	r2, #32
 8004066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	69da      	ldr	r2, [r3, #28]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	4013      	ands	r3, r2
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	429a      	cmp	r2, r3
 8004084:	bf0c      	ite	eq
 8004086:	2301      	moveq	r3, #1
 8004088:	2300      	movne	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	79fb      	ldrb	r3, [r7, #7]
 8004090:	429a      	cmp	r2, r3
 8004092:	d0a0      	beq.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b096      	sub	sp, #88	@ 0x58
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	4613      	mov	r3, r2
 80040ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	88fa      	ldrh	r2, [r7, #6]
 80040b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2222      	movs	r2, #34	@ 0x22
 80040c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d02d      	beq.n	8004132 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040dc:	4a40      	ldr	r2, [pc, #256]	@ (80041e0 <UART_Start_Receive_DMA+0x140>)
 80040de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e6:	4a3f      	ldr	r2, [pc, #252]	@ (80041e4 <UART_Start_Receive_DMA+0x144>)
 80040e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040f0:	4a3d      	ldr	r2, [pc, #244]	@ (80041e8 <UART_Start_Receive_DMA+0x148>)
 80040f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040fa:	2200      	movs	r2, #0
 80040fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3324      	adds	r3, #36	@ 0x24
 800410a:	4619      	mov	r1, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004110:	461a      	mov	r2, r3
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	f7fd fa7a 	bl	800160c <HAL_DMA_Start_IT>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2210      	movs	r2, #16
 8004122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e051      	b.n	80041d6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d018      	beq.n	800416c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800414e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800415a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800415e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e6      	bne.n	800413a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	e853 3f00 	ldrex	r3, [r3]
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800417c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417e:	f043 0301 	orr.w	r3, r3, #1
 8004182:	653b      	str	r3, [r7, #80]	@ 0x50
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3308      	adds	r3, #8
 800418a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800418c:	637a      	str	r2, [r7, #52]	@ 0x34
 800418e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004190:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004192:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004194:	e841 2300 	strex	r3, r2, [r1]
 8004198:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800419a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1e5      	bne.n	800416c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3308      	adds	r3, #8
 80041a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	613b      	str	r3, [r7, #16]
   return(result);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3308      	adds	r3, #8
 80041be:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041c0:	623a      	str	r2, [r7, #32]
 80041c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	69f9      	ldr	r1, [r7, #28]
 80041c6:	6a3a      	ldr	r2, [r7, #32]
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3758      	adds	r7, #88	@ 0x58
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	080043f1 	.word	0x080043f1
 80041e4:	0800451d 	.word	0x0800451d
 80041e8:	0800455b 	.word	0x0800455b

080041ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b08f      	sub	sp, #60	@ 0x3c
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	e853 3f00 	ldrex	r3, [r3]
 8004200:	61fb      	str	r3, [r7, #28]
   return(result);
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004212:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004214:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004216:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800421a:	e841 2300 	strex	r3, r2, [r1]
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1e6      	bne.n	80041f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3308      	adds	r3, #8
 800422c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	e853 3f00 	ldrex	r3, [r3]
 8004234:	60bb      	str	r3, [r7, #8]
   return(result);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800423c:	633b      	str	r3, [r7, #48]	@ 0x30
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3308      	adds	r3, #8
 8004244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004246:	61ba      	str	r2, [r7, #24]
 8004248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6979      	ldr	r1, [r7, #20]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	613b      	str	r3, [r7, #16]
   return(result);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e5      	bne.n	8004226 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8004262:	bf00      	nop
 8004264:	373c      	adds	r7, #60	@ 0x3c
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800426e:	b480      	push	{r7}
 8004270:	b095      	sub	sp, #84	@ 0x54
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	e853 3f00 	ldrex	r3, [r3]
 8004282:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800428a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	461a      	mov	r2, r3
 8004292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004294:	643b      	str	r3, [r7, #64]	@ 0x40
 8004296:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004298:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800429a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800429c:	e841 2300 	strex	r3, r2, [r1]
 80042a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1e6      	bne.n	8004276 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	3308      	adds	r3, #8
 80042ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6a3b      	ldr	r3, [r7, #32]
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042be:	f023 0301 	bic.w	r3, r3, #1
 80042c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3308      	adds	r3, #8
 80042ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e3      	bne.n	80042a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d118      	bne.n	800431a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f023 0310 	bic.w	r3, r3, #16
 80042fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6979      	ldr	r1, [r7, #20]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	613b      	str	r3, [r7, #16]
   return(result);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e6      	bne.n	80042e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800432e:	bf00      	nop
 8004330:	3754      	adds	r7, #84	@ 0x54
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b090      	sub	sp, #64	@ 0x40
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004346:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d137      	bne.n	80043c6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004358:	2200      	movs	r2, #0
 800435a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800435e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	623b      	str	r3, [r7, #32]
   return(result);
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004374:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800437e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004380:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e5      	bne.n	800435e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b0:	61fb      	str	r3, [r7, #28]
 80043b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69b9      	ldr	r1, [r7, #24]
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	617b      	str	r3, [r7, #20]
   return(result);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e6      	bne.n	8004392 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80043c4:	e002      	b.n	80043cc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80043c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80043c8:	f7fc fd6e 	bl	8000ea8 <HAL_UART_TxCpltCallback>
}
 80043cc:	bf00      	nop
 80043ce:	3740      	adds	r7, #64	@ 0x40
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f7ff f97e 	bl	80036e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e8:	bf00      	nop
 80043ea:	3710      	adds	r7, #16
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b09c      	sub	sp, #112	@ 0x70
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d171      	bne.n	80044f0 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800440c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800440e:	2200      	movs	r2, #0
 8004410:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800441c:	e853 3f00 	ldrex	r3, [r3]
 8004420:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004428:	66bb      	str	r3, [r7, #104]	@ 0x68
 800442a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004434:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800443a:	e841 2300 	strex	r3, r2, [r1]
 800443e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1e6      	bne.n	8004414 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3308      	adds	r3, #8
 800444c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	667b      	str	r3, [r7, #100]	@ 0x64
 800445e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3308      	adds	r3, #8
 8004464:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004466:	647a      	str	r2, [r7, #68]	@ 0x44
 8004468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800446c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	623b      	str	r3, [r7, #32]
   return(result);
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004490:	663b      	str	r3, [r7, #96]	@ 0x60
 8004492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800449a:	633a      	str	r2, [r7, #48]	@ 0x30
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80044ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b0:	2220      	movs	r2, #32
 80044b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d118      	bne.n	80044f0 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	69b9      	ldr	r1, [r7, #24]
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	617b      	str	r3, [r7, #20]
   return(result);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f2:	2200      	movs	r2, #0
 80044f4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004500:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004504:	4619      	mov	r1, r3
 8004506:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004508:	f7fc fc4a 	bl	8000da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800450c:	e002      	b.n	8004514 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800450e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004510:	f7ff f8f2 	bl	80036f8 <HAL_UART_RxCpltCallback>
}
 8004514:	bf00      	nop
 8004516:	3770      	adds	r7, #112	@ 0x70
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004534:	2b01      	cmp	r3, #1
 8004536:	d109      	bne.n	800454c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	b29b      	uxth	r3, r3
 8004542:	4619      	mov	r1, r3
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7fc fc2b 	bl	8000da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800454a:	e002      	b.n	8004552 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff f8dd 	bl	800370c <HAL_UART_RxHalfCpltCallback>
}
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800456e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004576:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004582:	2b80      	cmp	r3, #128	@ 0x80
 8004584:	d109      	bne.n	800459a <UART_DMAError+0x40>
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	2b21      	cmp	r3, #33	@ 0x21
 800458a:	d106      	bne.n	800459a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8004594:	6978      	ldr	r0, [r7, #20]
 8004596:	f7ff fe29 	bl	80041ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a4:	2b40      	cmp	r3, #64	@ 0x40
 80045a6:	d109      	bne.n	80045bc <UART_DMAError+0x62>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b22      	cmp	r3, #34	@ 0x22
 80045ac:	d106      	bne.n	80045bc <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80045b6:	6978      	ldr	r0, [r7, #20]
 80045b8:	f7ff fe59 	bl	800426e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045c2:	f043 0210 	orr.w	r2, r3, #16
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045cc:	6978      	ldr	r0, [r7, #20]
 80045ce:	f7ff f8a7 	bl	8003720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d2:	bf00      	nop
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f7ff f891 	bl	8003720 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045fe:	bf00      	nop
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004606:	b580      	push	{r7, lr}
 8004608:	b088      	sub	sp, #32
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	60bb      	str	r3, [r7, #8]
   return(result);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6979      	ldr	r1, [r7, #20]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	613b      	str	r3, [r7, #16]
   return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e6      	bne.n	800460e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fc2a 	bl	8000ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004654:	bf00      	nop
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_UARTEx_DisableFifoMode+0x16>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e027      	b.n	80046fe <HAL_UARTEx_DisableFifoMode+0x66>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2224      	movs	r2, #36	@ 0x24
 80046ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 0201 	bic.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80046dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800471e:	2302      	movs	r3, #2
 8004720:	e02d      	b.n	800477e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2224      	movs	r2, #36	@ 0x24
 800472e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0201 	bic.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f8a4 	bl	80048ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2220      	movs	r2, #32
 8004770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800479a:	2302      	movs	r3, #2
 800479c:	e02d      	b.n	80047fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2224      	movs	r2, #36	@ 0x24
 80047aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f866 	bl	80048ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b08c      	sub	sp, #48	@ 0x30
 8004806:	af00      	add	r7, sp, #0
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	4613      	mov	r3, r2
 800480e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004816:	2b20      	cmp	r3, #32
 8004818:	d142      	bne.n	80048a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8004820:	88fb      	ldrh	r3, [r7, #6]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e03b      	b.n	80048a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004836:	88fb      	ldrh	r3, [r7, #6]
 8004838:	461a      	mov	r2, r3
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f7ff fc2f 	bl	80040a0 <UART_Start_Receive_DMA>
 8004842:	4603      	mov	r3, r0
 8004844:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004848:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800484c:	2b00      	cmp	r3, #0
 800484e:	d124      	bne.n	800489a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d11d      	bne.n	8004894 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2210      	movs	r2, #16
 800485e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	617b      	str	r3, [r7, #20]
   return(result);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f043 0310 	orr.w	r3, r3, #16
 8004874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004880:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6a39      	ldr	r1, [r7, #32]
 8004884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	61fb      	str	r3, [r7, #28]
   return(result);
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8004892:	e002      	b.n	800489a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800489a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800489e:	e000      	b.n	80048a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048cc:	e031      	b.n	8004932 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ce:	2308      	movs	r3, #8
 80048d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048d2:	2308      	movs	r3, #8
 80048d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	0e5b      	lsrs	r3, r3, #25
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	0f5b      	lsrs	r3, r3, #29
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048f6:	7bbb      	ldrb	r3, [r7, #14]
 80048f8:	7b3a      	ldrb	r2, [r7, #12]
 80048fa:	4911      	ldr	r1, [pc, #68]	@ (8004940 <UARTEx_SetNbDataToProcess+0x94>)
 80048fc:	5c8a      	ldrb	r2, [r1, r2]
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004902:	7b3a      	ldrb	r2, [r7, #12]
 8004904:	490f      	ldr	r1, [pc, #60]	@ (8004944 <UARTEx_SetNbDataToProcess+0x98>)
 8004906:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004908:	fb93 f3f2 	sdiv	r3, r3, r2
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004914:	7bfb      	ldrb	r3, [r7, #15]
 8004916:	7b7a      	ldrb	r2, [r7, #13]
 8004918:	4909      	ldr	r1, [pc, #36]	@ (8004940 <UARTEx_SetNbDataToProcess+0x94>)
 800491a:	5c8a      	ldrb	r2, [r1, r2]
 800491c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004920:	7b7a      	ldrb	r2, [r7, #13]
 8004922:	4908      	ldr	r1, [pc, #32]	@ (8004944 <UARTEx_SetNbDataToProcess+0x98>)
 8004924:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004926:	fb93 f3f2 	sdiv	r3, r3, r2
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	08004b04 	.word	0x08004b04
 8004944:	08004b0c 	.word	0x08004b0c

08004948 <memset>:
 8004948:	4402      	add	r2, r0
 800494a:	4603      	mov	r3, r0
 800494c:	4293      	cmp	r3, r2
 800494e:	d100      	bne.n	8004952 <memset+0xa>
 8004950:	4770      	bx	lr
 8004952:	f803 1b01 	strb.w	r1, [r3], #1
 8004956:	e7f9      	b.n	800494c <memset+0x4>

08004958 <__libc_init_array>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4d0d      	ldr	r5, [pc, #52]	@ (8004990 <__libc_init_array+0x38>)
 800495c:	4c0d      	ldr	r4, [pc, #52]	@ (8004994 <__libc_init_array+0x3c>)
 800495e:	1b64      	subs	r4, r4, r5
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	2600      	movs	r6, #0
 8004964:	42a6      	cmp	r6, r4
 8004966:	d109      	bne.n	800497c <__libc_init_array+0x24>
 8004968:	4d0b      	ldr	r5, [pc, #44]	@ (8004998 <__libc_init_array+0x40>)
 800496a:	4c0c      	ldr	r4, [pc, #48]	@ (800499c <__libc_init_array+0x44>)
 800496c:	f000 f826 	bl	80049bc <_init>
 8004970:	1b64      	subs	r4, r4, r5
 8004972:	10a4      	asrs	r4, r4, #2
 8004974:	2600      	movs	r6, #0
 8004976:	42a6      	cmp	r6, r4
 8004978:	d105      	bne.n	8004986 <__libc_init_array+0x2e>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004980:	4798      	blx	r3
 8004982:	3601      	adds	r6, #1
 8004984:	e7ee      	b.n	8004964 <__libc_init_array+0xc>
 8004986:	f855 3b04 	ldr.w	r3, [r5], #4
 800498a:	4798      	blx	r3
 800498c:	3601      	adds	r6, #1
 800498e:	e7f2      	b.n	8004976 <__libc_init_array+0x1e>
 8004990:	08004b1c 	.word	0x08004b1c
 8004994:	08004b1c 	.word	0x08004b1c
 8004998:	08004b1c 	.word	0x08004b1c
 800499c:	08004b20 	.word	0x08004b20

080049a0 <memcpy>:
 80049a0:	440a      	add	r2, r1
 80049a2:	4291      	cmp	r1, r2
 80049a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80049a8:	d100      	bne.n	80049ac <memcpy+0xc>
 80049aa:	4770      	bx	lr
 80049ac:	b510      	push	{r4, lr}
 80049ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049b6:	4291      	cmp	r1, r2
 80049b8:	d1f9      	bne.n	80049ae <memcpy+0xe>
 80049ba:	bd10      	pop	{r4, pc}

080049bc <_init>:
 80049bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049be:	bf00      	nop
 80049c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c2:	bc08      	pop	{r3}
 80049c4:	469e      	mov	lr, r3
 80049c6:	4770      	bx	lr

080049c8 <_fini>:
 80049c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ca:	bf00      	nop
 80049cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ce:	bc08      	pop	{r3}
 80049d0:	469e      	mov	lr, r3
 80049d2:	4770      	bx	lr
